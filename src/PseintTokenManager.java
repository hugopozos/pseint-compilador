/* Generated By:JavaCC: Do not edit this line. PseintTokenManager.java */
package src;
import java.util.ArrayList;
import src.TablaIdentificadores;

/** Token Manager. */
public class PseintTokenManager implements PseintConstants
{
    static ArrayList<String> tabla = new ArrayList();

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000L) != 0L)
            return 88;
         if ((active0 & 0x42000000080000L) != 0L)
         {
            jjmatchedKind = 57;
            return 56;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 12;
         if ((active0 & 0x10000000L) != 0L)
            return 14;
         if ((active0 & 0x115530000148002L) != 0L)
         {
            jjmatchedKind = 57;
            return 17;
         }
         if ((active0 & 0x7000000L) != 0L)
            return 11;
         if ((active0 & 0x88a80000004004L) != 0L)
         {
            jjmatchedKind = 57;
            return 44;
         }
         if ((active0 & 0x20040000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 70;
         }
         return -1;
      case 1:
         if ((active0 & 0x198ff00001cc006L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0x18000000L) != 0L)
            return 11;
         if ((active0 & 0x42000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return 55;
         }
         if ((active0 & 0x5000000000000L) != 0L)
            return 17;
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return 69;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 54;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1bcff00001cc006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 17;
         }
         return -1;
      case 3:
         if ((active0 & 0x19afa000018c006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 17;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x24010000040000L) != 0L)
            return 17;
         return -1;
      case 4:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x82fa0000188006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 17;
         }
         if ((active0 & 0x118000000004000L) != 0L)
            return 17;
         return -1;
      case 5:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x82f80000188006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 17;
         }
         return -1;
      case 6:
         if ((active0 & 0x82b00000088006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
            return 17;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x480000100000L) != 0L)
            return 17;
         return -1;
      case 7:
         if ((active0 & 0xa00000008006L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 17;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x82100000080000L) != 0L)
            return 17;
         return -1;
      case 8:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x200000000004L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
            return 17;
         }
         if ((active0 & 0x8002L) != 0L)
            return 17;
         return -1;
      case 9:
         if ((active0 & 0x200000000004L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 17;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 17;
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 10;
            return 17;
         }
         return -1;
      case 11:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4L) != 0L)
            return 17;
         return -1;
      case 12:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 33:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 37:
         return jjStartNfaWithStates_0(0, 26, 11);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStartNfaWithStates_0(0, 24, 11);
      case 43:
         return jjStartNfaWithStates_0(0, 22, 88);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         return jjStartNfaWithStates_0(0, 23, 88);
      case 47:
         return jjStartNfaWithStates_0(0, 25, 11);
      case 58:
         return jjStopAtPos(0, 37);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 61:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 62:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20040000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x42000000080000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x88a80000004004L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x100020000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x15000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 38:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 11);
         break;
      case 61:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x120030000004000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000148000L);
      case 73:
      case 105:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8cb80000000004L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 124:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000080000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000040000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000002L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8cac0000000004L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000008000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20020000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 65:
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000004L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 17);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x42000000000002L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000000004000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000008000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 73:
      case 105:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x240000080000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000004L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000100000L);
      case 79:
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 17);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40500000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000004L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000100002L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40180000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000008000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000004L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 17);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 17);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 17);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000008004L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 17);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 17);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(8, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      case 79:
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 17);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 17);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40200000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 17);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L);
      case 79:
      case 111:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 2, 17);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      case 79:
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(13, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(14, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0xac2000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  else if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 61)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 11)
                     kind = 11;
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0xac2000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 61 && kind > 30)
                     kind = 30;
                  break;
               case 12:
                  if (curChar == 38)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  break;
               case 19:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  if ((0x2400L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 21:
                  if (curChar == 10 && kind > 62)
                     kind = 62;
                  break;
               case 22:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(0, 4);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(8, 11);
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(14, 15);
                  else if ((0x400000004L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(17);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 1:
                  jjAddStates(18, 19);
                  break;
               case 4:
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 14:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  jjAddStates(5, 7);
                  break;
               case 23:
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 25:
               case 31:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 39:
               case 45:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 52:
                  if ((0x800000008000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 53:
               case 57:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(8, 11);
                  break;
               case 66:
                  if ((0x200000002L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 67:
               case 71:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x4000000040000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 76:
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   62, 7, 8, 63, 64, 19, 20, 22, 70, 74, 81, 87, 56, 60, 44, 50, 
   30, 36, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\73", "\54", null, null, null, "\75", "\53", "\55", "\52", "\57", 
"\45", "\46\46", "\174\174", "\41", null, "\75\75", "\41\75", "\76", "\74", "\76\75", 
"\74\75", "\72", "\50", "\51", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffffffffffcffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xfc00000000000000L, 0x1L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PseintTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PseintTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 64)
   {
      jjmatchedKind = 64;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 63 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  tabla.add("Error lexico en linea:" + input_stream.getBeginLine() + " columna:" + input_stream.getBeginColumn() +
                                                                     " Identificador invalido:" + image);
         break;
      case 64 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      tabla.add("Error lexico en linea" + input_stream.getBeginLine() + " columna:" + input_stream.getBeginColumn() +
                    "Token invalido:" + image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
