/* Generated By:JavaCC: Do not edit this line. PseasyConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PseasyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INICIO = 1;
  /** RegularExpression Id. */
  int FIN = 2;
  /** RegularExpression Id. */
  int ENTERO = 3;
  /** RegularExpression Id. */
  int FLOTANTE = 4;
  /** RegularExpression Id. */
  int CADENA = 5;
  /** RegularExpression Id. */
  int BOOLEANO = 6;
  /** RegularExpression Id. */
  int LETRA = 7;
  /** RegularExpression Id. */
  int NUMERO = 8;
  /** RegularExpression Id. */
  int CADENA_TEXTO = 9;
  /** RegularExpression Id. */
  int NUMERO_ENTERO = 10;
  /** RegularExpression Id. */
  int NUMERO_DECIMAL = 11;
  /** RegularExpression Id. */
  int BOOLEANO_FALSO = 12;
  /** RegularExpression Id. */
  int BOOLEANO_VERDADERO = 13;
  /** RegularExpression Id. */
  int DELIMITADOR = 14;
  /** RegularExpression Id. */
  int COMA = 15;
  /** RegularExpression Id. */
  int ROMPER_CASO = 16;
  /** RegularExpression Id. */
  int LEER = 17;
  /** RegularExpression Id. */
  int ESCRIBIR = 18;
  /** RegularExpression Id. */
  int DEFINIR = 19;
  /** RegularExpression Id. */
  int ASIGNACION = 20;
  /** RegularExpression Id. */
  int SUMA = 21;
  /** RegularExpression Id. */
  int RESTA = 22;
  /** RegularExpression Id. */
  int MULTIPLICACION = 23;
  /** RegularExpression Id. */
  int DIVISION = 24;
  /** RegularExpression Id. */
  int LOGICO_AND = 25;
  /** RegularExpression Id. */
  int LOGICO_OR = 26;
  /** RegularExpression Id. */
  int LOGICO_NOT = 27;
  /** RegularExpression Id. */
  int OPERADOR_IGUAL = 28;
  /** RegularExpression Id. */
  int OPERADOR_DIFERENTE = 29;
  /** RegularExpression Id. */
  int OPERADOR_MAYOR = 30;
  /** RegularExpression Id. */
  int OPERADOR_MENOR = 31;
  /** RegularExpression Id. */
  int OPERADOR_MAYOR_IGUAL = 32;
  /** RegularExpression Id. */
  int OPERADOR_MENOR_IGUAL = 33;
  /** RegularExpression Id. */
  int OPERADOR_DOS_PUNTOS = 34;
  /** RegularExpression Id. */
  int PAREN_ABIERTO = 35;
  /** RegularExpression Id. */
  int PAREN_CERRADO = 36;
  /** RegularExpression Id. */
  int CONCATENACION = 37;
  /** RegularExpression Id. */
  int INICIO_CICLO_PARA = 38;
  /** RegularExpression Id. */
  int CONDICION_CICLO_PARA = 39;
  /** RegularExpression Id. */
  int INCREMENTO_CICLO_PARA = 40;
  /** RegularExpression Id. */
  int DECREMENTO_CICLO_PARA = 41;
  /** RegularExpression Id. */
  int FIN_CICLO_PARA = 42;
  /** RegularExpression Id. */
  int INICIO_CICLO_MIENTRAS = 43;
  /** RegularExpression Id. */
  int FIN_CICLO_MIENTRAS = 44;
  /** RegularExpression Id. */
  int INICIO_CICLO_REPETIR = 45;
  /** RegularExpression Id. */
  int CONDICION_CICLO_REPETIR = 46;
  /** RegularExpression Id. */
  int INICIO_CONDICIONAL_SI = 47;
  /** RegularExpression Id. */
  int ENTONCES = 48;
  /** RegularExpression Id. */
  int CONDICIONAL_SINO = 49;
  /** RegularExpression Id. */
  int FIN_CONDICIONAL_SI = 50;
  /** RegularExpression Id. */
  int INICIO_CONDICIONAL_SEGUN = 51;
  /** RegularExpression Id. */
  int CASO = 52;
  /** RegularExpression Id. */
  int CASO_PREDETERMINADO = 53;
  /** RegularExpression Id. */
  int FIN_SEGUN = 54;
  /** RegularExpression Id. */
  int HACER = 55;
  /** RegularExpression Id. */
  int VARIABLE = 56;
  /** RegularExpression Id. */
  int COMENTARIO = 61;
  /** RegularExpression Id. */
  int ID_INVALIDO = 62;
  /** RegularExpression Id. */
  int INVALIDO = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"Algoritmo\"",
    "\"FinAlgoritmo\"",
    "\"entero\"",
    "\"flotante\"",
    "\"cadena\"",
    "\"booleano\"",
    "<LETRA>",
    "<NUMERO>",
    "<CADENA_TEXTO>",
    "<NUMERO_ENTERO>",
    "<NUMERO_DECIMAL>",
    "\"Falso\"",
    "\"Verdadero\"",
    "\";\"",
    "\",\"",
    "\"fincaso\"",
    "\"Leer\"",
    "\"Escribir\"",
    "\"Definir\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"<<\"",
    "\"Para\"",
    "\"Hasta que\"",
    "\"incremento\"",
    "\"decremento\"",
    "\"FinPara\"",
    "\"Mientras\"",
    "\"FinMientras\"",
    "\"Repetir\"",
    "\"Finaliza cuando\"",
    "\"Si\"",
    "\"Entonces\"",
    "\"Sino\"",
    "\"FinSi\"",
    "\"Segun\"",
    "\"Caso\"",
    "\"En otro caso\"",
    "\"FinSegun\"",
    "\"Hacer\"",
    "<VARIABLE>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\\n\"",
    "\"\\n\"",
    "<COMENTARIO>",
    "<ID_INVALIDO>",
    "<INVALIDO>",
  };

}
