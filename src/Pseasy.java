/* Generated By:JavaCC: Do not edit this line. Pseasy.java */
package src;
import java.util.ArrayList;
import java.io.*;
import java.util.ArrayDeque;
import java.util.Deque;
import src.TablaIdentificadores;
public class Pseasy implements PseasyConstants {


        static ArrayList<String> tabla = PseasyTokenManager.tabla;

        //Arreglo para guardar lo generado por el codigo intermedio
        static ArrayList<String> codigoIntermedio = new ArrayList();

        //Arreglo para guardar variables temporales
        static ArrayList<String> listaTemporales = new ArrayList();

        static Deque<String> pila = PseasyTokenManager.pila;

        //Variables para generacion de codigo intermedio
        private static int tmpContador = 0;
        private static int etContador = 0;

        public static void main(String[] args) {
            try{
                Pseasy pseasy = new Pseasy(System.in);
                pseasy.programa();

                if(tabla.size() != 0){
                    System.out.println("PROGRAM ERRORS");
                    System.out.println("=================");
                    for(String i:tabla){
                        System.out.println(i);
                    }
                }else{
                    System.out.println("\ncompilation generated with success");
                    ArchivoCodigoIntermedio.escribirArchivo(codigoIntermedio);

                }
              }catch(Exception e){
                System.out.println(e.getMessage());
              }
          }



          //METODOS PARA LA GENERACION DE CODIGO INTERMEDIO
          private static void agregarCodigoIntermedio(String codigo){
            codigoIntermedio.add(codigo);
          }

          private static String generarTmp(){
            tmpContador++;
            String aux= "tmp" + tmpContador;
            listaTemporales.add(aux);
            return aux;
          }
          private static String generarEq(){
            etContador++;
            return "etq"+etContador;
          }
          private static class BloqueCondicion{
            String etqVerdad,etqFalso;
          }

          //Obtiene el ultimo elemento en nuestra lista de variables temporales
          private static String obtenerUltimoTmp(){
            if(listaTemporales.size() > 0)
            {
                int indexUltimo = listaTemporales.size() -1;
                return listaTemporales.get(indexUltimo);
            }
                return null;
          }

          //Obtiene el tamaÃ±o de la lista de variables temporales

          private static void generarOperacionAsignacion(String id, String exp){
            String tmp = id +" := " + exp + "\n";
            codigoIntermedio.add(tmp);
          }



          private static void generarOperacionAritmetica(String op,String ex1, String ex2){

                String aux = generarTmp();
                String cI = aux + "=" + ex1 + op + ex2 + "\n";
                codigoIntermedio.add(cI);
          }

          //METODOS PARA GENERAR EL CODIGO INTERMEDIO EN CONDICIONES
          private static void generarLabel(String label){
            codigoIntermedio.add("label " + label + "\n");
          }
          private static void generarGoto(String label){
            codigoIntermedio.add("\tgoto " + label + "\n");
          }

          private BloqueCondicion generarOperacionRelacional(String e1, String e2, String op){
            BloqueCondicion bloque = new BloqueCondicion();
            bloque.etqVerdad = generarEq();
            bloque.etqFalso = generarEq();
            codigoIntermedio.add("\tif " +e1 +op +e2 +" goto "+bloque.etqVerdad + "\n");
            generarGoto(bloque.etqFalso);
            return bloque;
          }

          private static void interCondicion(BloqueCondicion bloque){
            String aux = bloque.etqVerdad;
            bloque.etqVerdad = bloque.etqFalso;
            bloque.etqFalso = aux;
          }

// Gramaticas

//CAMBIO: Nuestro programa puede no tener sentencias entre Algoritmo y FinAlgoritmo
  final public void programa() throws ParseException {
    try {
      jj_consume_token(INICIO);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      jj_consume_token(FIN);

    } catch (ParseException e) {
            Token t;
            do{
                t=getNextToken();
            }while(t.kind != EOF);


            tabla.add("Parser Error:" + e.getMessage());
    }
  }

  final public void sentencias() throws ParseException {
    TablaIdentificadores.inicializarTipos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      sentenciaAsignacion();
      break;
    case DEFINIR:
      sentenciaDeclaracionVariables();
      break;
    case LEER:
      leerDato();
      break;
    case ESCRIBIR:
      imprimirDato();
      break;
    case INICIO_CONDICIONAL_SI:
      sentenciaSi();
      break;
    case INICIO_CONDICIONAL_SEGUN:
      sentenciaSegun();
      break;
    case INICIO_CICLO_PARA:
      sentenciaPara();
      break;
    case INICIO_CICLO_MIENTRAS:
      sentenciaMientras();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//ASIGNACION DE VALOR
//CAMBIAR FORMA EN COMO SE HACE LA C
  final public void sentenciaAsignacion() throws ParseException {
    String identificador = null;
    String asignado = null;
    try {
      jj_consume_token(VARIABLE);
                        //EXISTENCIA DE IDENTIFICADORES
                        // Sino existe el id, lo guardamos en nuestra arreglo de errores
                        //System.out.println("Token:" + token);
                         if(!TablaIdentificadores.checkExistenciaId(token.image)){
                               tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                       token.beginLine + " column:" + token.beginColumn);
                         }else{
                            identificador = token.image;

                         }
      asignado = asignacion();
                                //Se evalua si se esta asignando el tipo correcto al identificador

                        //--- PARTE SEMANTICA: COMPROBACION DE TIPOS
                        if(asignado != null && identificador !=null){
                                  //Si asignado e identificador tienen un valor asignado, se comprueban que sean del mismo tipo
                                if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){

                                    tabla.add("The token: " + asignado + " doesn't correspond to the " +
                                            TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");

                                // ----- GENERACION CODIGO INTERMEDIO
                                //Si esta bien semanticamente, lo pasamos a codigo intermedio
                                }else{
                                    // variable = tmp# -> se asigna la variable al ultimo tmp generado
                                    asignado = obtenerUltimoTmp();
                                     generarOperacionAsignacion(identificador,asignado);



                                }

                        }
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
        //System.out.println(e.toString());
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

//Probar manejo de errores
  final public void sentenciaDeclaracionVariables() throws ParseException {
    try {
      declaracionVariables();
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
            //System.out.println(e.toString());
            Token t;
            do{
                t=getNextToken();
                //VERIFICAR ERROR DE PUNTO Y COMA AL FINAL
            }while(t.kind != DELIMITADOR && t.kind != EOF);
            tabla.add("Parser error:" + e.getMessage());
    }
  }

//CAMBIAMOS el tipo de dato retornado a token
  final public String constantes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                     {if (true) return token.image;}
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                         {if (true) return token.image;}
      break;
    case CADENA_TEXTO:
      jj_consume_token(CADENA_TEXTO);
                      {if (true) return token.image;}
      break;
    case BOOLEANO_FALSO:
      jj_consume_token(BOOLEANO_FALSO);
                        {if (true) return token.image;}
      break;
    case BOOLEANO_VERDADERO:
      jj_consume_token(BOOLEANO_VERDADERO);
                            {if (true) return token.image;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//ASIGNACION CORRECTA DE VALORES
  final public String asignacion() throws ParseException {
                     String asignado = "";
    jj_consume_token(ASIGNACION);
    asignado = tipoOperacion();
                    {if (true) return asignado;}
    throw new Error("Missing return statement in function");
  }

/*
String condicion():{String asignado = "";} {
    asignado=operacion() {return asignado;}
    //( operadoresRelacionales() operacion() )* -> Evaluar si quiero dejar esto en mi gramatica
}*/


/*
* Separar las operaciones aritmeticas de las relaciones
*
* */
/*
String operacion():{
    String t = "";
    String id = "";
    String valor = "";
 }{
    ( <LOGICO_NOT> )* ( <VARIABLE> { //EXISTENCIA DE IDENTIFICADORES

                                    // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                                        tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                                    token.beginLine + " column:" + token.beginColumn);
                                    }else{
                                        t=token.image;
                                    }

}
    | t=constantes() {  //En cualquier asignacion de constantes, se utiliza una variable temporal
                        //tmp = 10
                        //return tmp

                         }
    | operacionParentesis() )

    (operadores() ( <LOGICO_NOT> )* (<VARIABLE> {    //EXISTENCIA DE IDENTIFICADORES
                                                     // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                                        if(!TablaIdentificadores.checkExistenciaId(token.image)){
                                                            tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                                            token.beginLine + " column:" + token.beginColumn);
                                                        }else{
                                                            t=token.image;
                                                        }
}
    | t=constantes()| operacionParentesis() ))*
    {return t;}
}*/

/*INICIA MODIFICACION DE FUNCIONES BNF*/
  final public String tipoOperacion() throws ParseException {
                         String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
    case NUMERO_DECIMAL:
    case PAREN_ABIERTO:
    case VARIABLE:
      t = operacionAritmetica();
      break;
    case CADENA_TEXTO:
      t = operacionConcatenacion();
      break;
    case BOOLEANO_FALSO:
    case BOOLEANO_VERDADERO:
      t = asignarBooleano();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     //Borramos los elementos de la pila
          pila.clear();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
* EXPLICACION DE VARIABLES
* e1 y e2 son variables que guardan la representacion en string del token
* Pila es una estructura de datos que nos permite comprobar la jerarquia de operadores
* */
  final public String operacionAritmetica() throws ParseException {
                              String e1=""; String e2="";String aux="";
    e1 = nivelSegundoJerarquia();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        e2 = nivelSegundoJerarquia();
                        //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                        //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                        if(pila.size() > 0 && pila.getLast().equals("+")){
                            //Se comprueba que no se haya generado antes una variable temporal
                            //Si es asi, el utiliza la ultima variable temporal generada
                            aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                            generarOperacionAritmetica("+",aux,e2);

                            //Eliminamos el elemto final
                            pila.pop();
                            pila.add("+");
                        }
                        /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                        la funcion generarOperacion, de la siguiente forma
                        */
                        else{
                            e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                            generarOperacionAritmetica("+",e1,e2);

                            //Guardamos el operador en la pila
                            pila.add("+");
                        }
        break;
      case RESTA:
        jj_consume_token(RESTA);
        e2 = nivelSegundoJerarquia();
                            //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                            //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("-")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("-",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("-");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("-",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("-");
                                    }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                 {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//Funciones para la jerarquia de operadores
  final public String nivelSegundoJerarquia() throws ParseException {
                                String e1; String e2; String aux="";
    e1 = terminalesNumeros();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case DIVISION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        e2 = terminalesNumeros();
                            //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                            //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("*")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("*",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("*");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("*",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("*");
                                }
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        e2 = terminalesNumeros();
                                //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                                //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("/")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("/",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("/");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("/",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("/");
                                }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                               {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String terminalesNumeros() throws ParseException {
                            String t="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                      t=token.image;
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                       t=token.image;
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
                    //EXISTENCIA DE IDENTIFICADORES
                 // Sino existe el id, lo guardamos en nuestra arreglo de errores
                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                        tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                        token.beginLine + " column:" + token.beginColumn);
                    }else{
                        t=token.image;
                    }
      break;
    case PAREN_ABIERTO:
      jj_consume_token(PAREN_ABIERTO);
      t = operacionAritmetica();
      jj_consume_token(PAREN_CERRADO);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String operacionConcatenacion() throws ParseException {
                                 String ex;
    jj_consume_token(CADENA_TEXTO);
                   ex=token.image;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(SUMA);
      jj_consume_token(CADENA_TEXTO);
                                                           ex=token.image;
    }
     {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public String asignarBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEANO_VERDADERO:
      jj_consume_token(BOOLEANO_VERDADERO);
                          {if (true) return token.image;}
      break;
    case BOOLEANO_FALSO:
      jj_consume_token(BOOLEANO_FALSO);
                       {if (true) return token.image;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//TERMINA MODIFICACION DE FUNCIONES BNF

/*
void operacionParentesis():{}{
    <PAREN_ABIERTO> operacion() <PAREN_CERRADO>
}

void operadores():{}{
    operadoresAritmeticos() | operadoresLogicos() | operadoresRelacionales()
}*/

//DECLARACION DE VARIABLES:COMPROBACION DE TIPOS
  final public void declaracionVariables() throws ParseException {
    String identificador = "";
    String asignado = "";
    String tipoDato = "";
    String aux;
    jj_consume_token(DEFINIR);
    tipoDato = tiposDato();
    jj_consume_token(VARIABLE);
                        if(TablaIdentificadores.checkExistenciaId(token.image)){

                            tabla.add("The identifier: " + token.image + " already exist, at line: " + token.beginLine + " column:" + token.endColumn);
                        }else{
                            TablaIdentificadores.insertarIdentificadores(token.image,tipoDato);
                            identificador = token.image;
                        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      asignado = asignacion();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                               //Se evalua si se esta asignando el tipo correcto al identificador
                    if(!asignado.equals("")){ //Comprobamos que el token asignado tenga un valor asociado y no sea nulo
                        //System.out.println("asignado =" + asignado);
                                  if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){
                                      tabla.add("The token: " + asignado + " doesn't correspond to the " +
                                        TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");
                                  }else{
                                      aux = tipoDato + " " + identificador + " = " +asignado + "\n";
                                      agregarCodigoIntermedio(aux);
                                  }
                    } else{
                    aux = tipoDato +" "+ identificador + "\n";
                    agregarCodigoIntermedio(aux);
                    }
  }

  final public String tiposDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
              {if (true) return token.image;}
      break;
    case FLOTANTE:
      jj_consume_token(FLOTANTE);
                  {if (true) return token.image;}
      break;
    case CADENA:
      jj_consume_token(CADENA);
                {if (true) return token.image;}
      break;
    case BOOLEANO:
      jj_consume_token(BOOLEANO);
                  {if (true) return token.image;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void leerDato() throws ParseException {
                 String leer; String variable;
    try {
      jj_consume_token(LEER);
      jj_consume_token(VARIABLE);
                         variable=token.image;
      jj_consume_token(DELIMITADOR);
                                                               agregarCodigoIntermedio("Leer " + variable );
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

  final public void imprimirDato() throws ParseException {
                     String texto; String variable;
    try {
      if (jj_2_1(3)) {
        jj_consume_token(ESCRIBIR);
        jj_consume_token(CADENA_TEXTO);
                                              texto=token.image;
        jj_consume_token(DELIMITADOR);
                                                                                 agregarCodigoIntermedio("\tEscribir " + texto + "\n");
      } else if (jj_2_2(3)) {
        jj_consume_token(ESCRIBIR);
        jj_consume_token(CADENA_TEXTO);
                                              texto=token.image;
        jj_consume_token(COMA);
        jj_consume_token(VARIABLE);
                                                                                  variable=token.image;
        jj_consume_token(DELIMITADOR);
                                                                                                                      agregarCodigoIntermedio("\tEscribir " + texto +"," + variable + "\n" );
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESCRIBIR:
          jj_consume_token(ESCRIBIR);
          jj_consume_token(VARIABLE);
                              variable = token.image;
          jj_consume_token(DELIMITADOR);
                                                                    agregarCodigoIntermedio("\tEscribir " + variable + "\n");
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != FIN);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

/*  MODIFICAMOS LA FUNCION CONDICION*/
  final public BloqueCondicion condicion() throws ParseException {
                             BloqueCondicion c1,c2;
    c1 = condTerm();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(LOGICO_OR);
                                generarLabel(c1.etqFalso);
      c2 = condTerm();
                            generarLabel(c1.etqVerdad);
                            generarGoto(c2.etqVerdad);
                            c1=c2;
    }
                                      {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condTerm() throws ParseException {
                            BloqueCondicion c1; BloqueCondicion c2;
    c1 = condFact();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_AND:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(LOGICO_AND);
                                 generarLabel(c1.etqVerdad);
      c2 = condFact();
                            generarLabel(c1.etqFalso);
                            generarGoto(c2.etqFalso);
                            c1=c2;
    }
                            {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condFact() throws ParseException {
 BloqueCondicion c1;
 boolean negado = false;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_NOT:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(LOGICO_NOT);
                  negado = !negado;
    }
    c1 = condSimple();
        if(negado) interCondicion(c1);
        {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condSimple() throws ParseException {
                              String ex1;String operador;String ex2;
    ex1 = terminalesBooleanas();
    operador = operadoresRelacionales();
    ex2 = tipoOperacion();
                            ex2 = (obtenerUltimoTmp() == null) ? ex2:obtenerUltimoTmp();
                        {if (true) return generarOperacionRelacional(ex1,ex2,operador);}
    throw new Error("Missing return statement in function");
  }

  final public String operadoresRelacionales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_IGUAL:
      jj_consume_token(OPERADOR_IGUAL);
                      {if (true) return token.image;}
      break;
    case OPERADOR_DIFERENTE:
      jj_consume_token(OPERADOR_DIFERENTE);
                            {if (true) return token.image;}
      break;
    case OPERADOR_MAYOR:
      jj_consume_token(OPERADOR_MAYOR);
                        {if (true) return token.image;}
      break;
    case OPERADOR_MAYOR_IGUAL:
      jj_consume_token(OPERADOR_MAYOR_IGUAL);
                              {if (true) return token.image;}
      break;
    case OPERADOR_MENOR:
      jj_consume_token(OPERADOR_MENOR);
                        {if (true) return token.image;}
      break;
    case OPERADOR_MENOR_IGUAL:
      jj_consume_token(OPERADOR_MENOR_IGUAL);
                              {if (true) return token.image;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String terminalesBooleanas() throws ParseException {
                              String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                    {if (true) return token.image;}
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                      {if (true) return token.image;}
      break;
    case CADENA_TEXTO:
      jj_consume_token(CADENA_TEXTO);
                     {if (true) return token.image;}
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      //Comprobamos si la variable existe
     if(!TablaIdentificadores.checkExistenciaId(token.image)){

        tabla.add("The identifier: " + token.image + " doesnt exist, at line: " + token.beginLine + " column:" + token.endColumn);

     }else{
        {if (true) return token.image;}
    }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void sentenciaSi() throws ParseException {
                    BloqueCondicion c; String etqFinSi;
    try {
      jj_consume_token(INICIO_CONDICIONAL_SI);
      c = condicion();
      jj_consume_token(ENTONCES);
                                                          generarLabel(c.etqVerdad);
      label_8:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
      }
            etqFinSi = generarEq();
            generarGoto(etqFinSi);
            generarLabel(c.etqFalso);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDICIONAL_SINO:
        jj_consume_token(CONDICIONAL_SINO);
        label_9:
        while (true) {
          sentencias();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEER:
          case ESCRIBIR:
          case DEFINIR:
          case INICIO_CICLO_PARA:
          case INICIO_CICLO_MIENTRAS:
          case INICIO_CONDICIONAL_SI:
          case INICIO_CONDICIONAL_SEGUN:
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_9;
          }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(FIN_CONDICIONAL_SI);
             generarLabel(etqFinSi);
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

  final public void sentenciaSegun() throws ParseException {
                       String ex ="";String finSegun; String finalCaso; String eCaso;
    jj_consume_token(INICIO_CONDICIONAL_SEGUN);
    jj_consume_token(VARIABLE);
                if(!TablaIdentificadores.checkExistenciaId(token.image)){
                    tabla.add("The identifier: " + token.image + " doesn`t exist, at line: " +
                    token.beginLine + " column:" + token.endColumn);
                        }
                else {ex=token.image;}
    jj_consume_token(HACER);
    label_10:
    while (true) {
      jj_consume_token(CASO);
      eCaso = constantes();
      jj_consume_token(OPERADOR_DOS_PUNTOS);
      finalCaso = generarEq();
        agregarCodigoIntermedio("\tif " + ex + " != " + eCaso + " goto " + finalCaso + "\n");
        generarLabel(finalCaso);
      label_11:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASO_PREDETERMINADO:
      jj_consume_token(CASO_PREDETERMINADO);
      jj_consume_token(OPERADOR_DOS_PUNTOS);
      label_12:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(FIN_SEGUN);
                 finSegun = generarEq(); generarLabel(finSegun);
  }

//Ciclo for
  final public void sentenciaPara() throws ParseException {
                      BloqueCondicion c;String inicioPara; String ex1; String ex2;String variacion;
    jj_consume_token(INICIO_CICLO_PARA);
                              inicioPara=generarEq();
                              generarLabel(inicioPara);
    jj_consume_token(VARIABLE);
                   ex1=token.image;
    jj_consume_token(ASIGNACION);
    ex2 = tipoOperacion();
                                                                      generarOperacionAsignacion(ex1,ex2);
    jj_consume_token(CONDICION_CICLO_PARA);
    c = condicion();
                                                  generarLabel(c.etqVerdad);
    variacion = variacionPara();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
    }
                               agregarCodigoIntermedio("\t" + ex1 + " " + variacion + " " + "1");
    jj_consume_token(FIN_CICLO_PARA);
                             generarGoto(inicioPara); generarLabel(c.etqFalso);
  }

  final public String variacionPara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO_CICLO_PARA:
      jj_consume_token(INCREMENTO_CICLO_PARA);
                             {if (true) return "inc";}
      break;
    case DECREMENTO_CICLO_PARA:
      jj_consume_token(DECREMENTO_CICLO_PARA);
                              {if (true) return "des";}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
//Ciclo do while
void sentenciaRepetir():{ }{

    <INICIO_CICLO_REPETIR> ( sentencias() )+
    <CONDICION_CICLO_REPETIR> condicion() <DELIMITADOR>
}*/

//Ciclo while
  final public void sentenciaMientras() throws ParseException {
                          BloqueCondicion c;String inicioWhile="";
    jj_consume_token(INICIO_CICLO_MIENTRAS);
                                inicioWhile=generarEq();
                               generarLabel(inicioWhile);
    c = condicion();
    jj_consume_token(HACER);
                           generarLabel(c.etqVerdad);
    label_14:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
    }
    jj_consume_token(FIN_CICLO_MIENTRAS);
                          generarGoto(inicioWhile); generarLabel(c.etqFalso);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ESCRIBIR)) return true;
    if (jj_scan_token(CADENA_TEXTO)) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ESCRIBIR)) return true;
    if (jj_scan_token(CADENA_TEXTO)) return true;
    if (jj_scan_token(DELIMITADOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PseasyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x70000,0x70000,0x3e00,0x3e00,0x300000,0x300000,0xc00000,0xc00000,0xc00,0x100000,0x3000,0x80000,0x78,0x20000,0x2000000,0x1000000,0x4000000,0xf8000000,0xe00,0x70000,0x70000,0x0,0x70000,0x0,0x70000,0x0,0xc00,0x70000,0x0,0x70000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x422210,0x422210,0x0,0x400004,0x0,0x0,0x0,0x0,0x400004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x400000,0x422210,0x422210,0x8000,0x422210,0x40000,0x422210,0x80000,0x0,0x422210,0xc0,0x422210,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Pseasy(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Pseasy(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PseasyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Pseasy(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PseasyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Pseasy(PseasyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PseasyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }

 // ------------------------ GENERACION CODIGO INTERMEDIO -----------------------------


 //CLASE PARA ESCRIBIR EL CODIGO INTERMEDIO EN UN ARCHIVO
class ArchivoCodigoIntermedio {

    public static void escribirArchivo(ArrayList<String>codigoIntermedio){
        String fileName = "codigoIntermedio\\codigo_intermedio.txt";
        File archivo = new File(fileName);
        try{
            PrintWriter salida = new PrintWriter(archivo);
            for(String e:codigoIntermedio){
                salida.print(e);
            }
            salida.close();
        }catch(FileNotFoundException ex){
            System.out.println("No se encontro el archivo");
        }
    }
}
