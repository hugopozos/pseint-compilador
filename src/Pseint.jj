
options {
    STATIC = false;
    //**AGREGUE UNA OPCION QUE ME PERMITE NO TOMARLE IMPORTANCIA MAYUSCULAS Y MINUSCULAS
    IGNORE_CASE = true;
}

PARSER_BEGIN(Pseint)
package src;
import java.util.ArrayList;
import src.TablaIdentificadores;
public class Pseint {

        static ArrayList<String> tabla = PseintTokenManager.tabla;
        public static void main(String[] args) {
            try{
                Pseint pseint = new Pseint(System.in);
                pseint.programa();

                if(tabla.size() != 0){
                    System.out.println("ERRORES PROGRAMA");
                    System.out.println("=================");
                    for(String i:tabla){
                        System.out.println(i);
                    }
                }else{
                    System.out.println("\nCompilacion completada con exito");

                }
              }catch(Exception e){
                System.out.println(e.getMessage());
              }
          }
        }
PARSER_END(Pseint)

TOKEN_MGR_DECLS:{
    static ArrayList<String> tabla = new ArrayList();
}

// Inicio y fin del programa
TOKEN : {
    <INICIO: "Algoritmo">
    |
    <FIN: "FinAlgoritmo">
}

// Tipos de dato
TOKEN : {

    <ENTERO: ("Entero" | "entero")>
    |
    <FLOTANTE : ("Flotante" | "flotante")>
    |
    <CADENA: ("Cadena" | "cadena")>
    |
    <CARACTER: ("Caracter" | "caracter")>
    |
    <BOOLEANO: ("Booleano" | "booleano")>
}

//DEFINIR ENTERO x = 10;
// "x" -> 50 ()
//
// Constantes/Literales
TOKEN : {
    <#LETRA: ["a" - "z"] | ["A" - "Z"]>
    |
    <#NUMERO: ["0" - "9"]>
    |
    <CADENA_TEXTO: "\"" ( ~["\""] )* "\"">
    |
    <CARACTER_TEXTO: "'"( ~["'"] | "" )"'">
    //<NUMERO_ENTERO: ("-" | "" | "+")(<NUMERO>)+>
    |<NUMERO_ENTERO:(<NUMERO>)+>
    |
    <NUMERO_DECIMAL: ("-" | "" | "+")(<NUMERO>)+"."(<NUMERO>)+>
    |
    <BOOLEANO_FALSO: "Falso">
    |
    <BOOLEANO_VERDADERO: "Verdadero">
    |
    <DELIMITADOR: ";">
    |
    <COMA:",">

}

// Escritura, Lectura y Definici√≥n de variables
TOKEN : {
    <LEER: "Leer">
    |
    <ESCRIBIR: "Escribir">
    |
    <DEFINIR: "Definir">
    //**ELIMINE EL TOKEN COMO
}

// Operadores
TOKEN : {
    <ASIGNACION: "=">
    |
    <SUMA: "+">
    |
    <RESTA: "-">
    |
    <MULTIPLICACION: "*">
    |
    <DIVISION: "/">
    |
    <MODULO: "%">
    |
    <LOGICO_AND: "&&">
    |
    <LOGICO_OR: "||">
    |
    <LOGICO_NOT: "!">
    |
    //QUITAR EL SIGUIENTE TOKEN
    // x +=3
    <ASIGNACION_COMPUESTA: (<SUMA>|<RESTA>|<MULTIPLICACION>|<DIVISION>|<MODULO>|<LOGICO_AND>|<LOGICO_OR>)<ASIGNACION>>
    |
    <OPERADOR_IGUAL: "==">
    |
    <OPERADOR_DIFERENTE: "!=">
    |
    <OPERADOR_MAYOR: ">">
    |
    <OPERADOR_MENOR: "<">
    |
    <OPERADOR_MAYOR_IGUAL: ">=">
    |
    <OPERADOR_MENOR_IGUAL: "<=">
    |
    <OPERADOR_DOS_PUNTOS: ":">
    |
    <PAREN_ABIERTO: "(">
    |
    <PAREN_CERRADO: ")">
}

// Ciclos
TOKEN : {
    <INICIO_CICLO_PARA: "Para">
    |
    <CONDICION_CICLO_PARA: "Hasta que">
    |
    <INCREMENTO_CICLO_PARA: "Con incremento">
    |
    <FIN_CICLO_PARA: "FinPara">
    |
    <INICIO_CICLO_MIENTRAS: "Mientras">
    |
    <FIN_CICLO_MIENTRAS: "FinMientras">
    |
    <INICIO_CICLO_REPETIR: "Repetir">
    |
    <CONDICION_CICLO_REPETIR: "Finaliza cuando">
}

// Condicionales
TOKEN : {
    <INICIO_CONDICIONAL_SI:"Si">
    |
    <ENTONCES:"Entonces">
    |
    <CONDICIONAL_SINO:"Sino">
    |
    <FIN_CONDICIONAL_SI:"FinSi">
    |
    <INICIO_CONDICIONAL_SEGUN:"Segun">
    |
    <CASO:"Caso">
    |
    <CASO_PREDETERMINADO:"En otro caso">
    |
    <FIN_SEGUN:"FinSegun">
    |
    <HACER : "Hacer">
}

//Variables
TOKEN : {
    <VARIABLE:(<LETRA> | "_")(<NUMERO> | <LETRA> | "_")*>
    /*
    * IDENTIFICADORES NO VALIDOS
    * */
}

SKIP : {
    " "
    | "\t"
    | "\r\n"
    | "\n"
    | <COMENTARIO: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    //Tokens invalidos
    |<ID_INVALIDO:(<NUMERO>)+(<LETRA>|<NUMERO>)+>{tabla.add("Error lexico en linea:" + input_stream.getBeginLine() + " columna:" + input_stream.getBeginColumn() +
                                                                     " Identificador invalido:" + image);}
    | <INVALIDO: ~[]>{tabla.add("Error lexico en linea" + input_stream.getBeginLine() + " columna:" + input_stream.getBeginColumn() +
                    "Token invalido:" + image);}
}

// Gramaticas

//CAMBIO: Nuestro programa puede no tener sentencias entre Algoritmo y FinAlgoritmo
void programa(): { }{

       try{
          <INICIO>
          ( sentencias() )*
          <FIN>{TablaIdentificadores.mostrarTabla();}
       }catch(ParseException e){
            Token t;
            do{
                t=getNextToken();
            }while(t.kind != EOF);
            tabla.add("Error del parser:" + e.getMessage());
       }

}

void sentencias():{
    TablaIdentificadores.inicializarTipos();
 }{

    try{
        (
            sentenciaAsignacion() |
            sentenciaDeclaracionVariables() |
            leerDato() |
            imprimirDato() |
            sentenciaSi() |
            sentenciaSegun() |
            sentenciaPara() |
            sentenciaRepetir() |
            sentenciaMientras()
        )
    }catch(ParseException e){
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != EOF);
        tabla.add("Error del parser:" + e.getMessage());
    }


}
//ASIGNACION DE VALOR
//Aqui hay un problema
void sentenciaAsignacion():{
    Token identificador = new Token();
    Token asignado = new Token();
 }{
    try{


    <VARIABLE> {
                    //EXISTENCIA DE IDENTIFICADORES
                    // Sino existe el id, lo guardamos en nuestra arreglo de errores
                     if(!TablaIdentificadores.checkExistenciaId(token)){
                           tabla.add("El identificador: " + token.image + " no existe, error en la linea:" +
                           token.beginLine + " en la columna:" + token.beginColumn);
                     }else{
                        identificador = token;
                     }
    }
    asignado=asignacion() { //Se evalua si se esta asignando el tipo correcto al identificador
                       System.out.println("identificador: " + identificador.image);
                       System.out.println("asignado: " + asignado.image);
                      if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){
                       tabla.add("El token: " + asignado.image + " no corresponde al tipo:" + TablaIdentificadores.obtenerTipo(identificador));
                          }
    }
    <DELIMITADOR>

    }catch(ParseException e){
        //System.out.println(e.toString());
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR);
        tabla.add("Falta de un elemento:" + e.getMessage());
    }
}

//Probar manejo de errores
void sentenciaDeclaracionVariables():{}{
    try{
        (declaracionVariables() <DELIMITADOR>)

    }catch(ParseException e){
            //System.out.println(e.toString());
            Token t;
            do{
                t=getNextToken();
                //VERIFICAR ERROR DE PUNTO Y COMA AL FINAL
            }while(t.kind != DELIMITADOR);
            tabla.add("Error:" + e.getMessage());
    }
}


//CAMBIAMOS el tipo de dato retornado a token
Token constantes():{ }{
    <NUMERO_ENTERO> {return token;}
    | <NUMERO_DECIMAL>  {return token;}
    | <CADENA_TEXTO> {return token;}
    | <CARACTER_TEXTO> {return token;}
    | <BOOLEANO_FALSO> {return token;}
    | <BOOLEANO_VERDADERO> {return token;}
}

//ASIGNACION CORRECTA DE VALORES
Token asignacion():{Token asignado = new Token();}{
    ( <ASIGNACION> | <ASIGNACION_COMPUESTA> ) asignado=condicion() {return asignado;}
}

Token condicion():{Token asignado = new Token();} {
    asignado=operacion() {return asignado;}
    ( operadoresRelacionales() operacion() )*
}


Token operacion():{
    Token t;
 }{
    ( <LOGICO_NOT> )* ( <VARIABLE> { //EXISTENCIA DE IDENTIFICADORES
                                    // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                    if(!TablaIdentificadores.checkExistenciaId(token)){
                                        tabla.add("El identificador: " + token.image + " no existe, error en la linea:" +
                                        token.beginLine + " en la columna:" + token.beginColumn);
                                    }else{
                                        return t=token;
                                    }

}
    | t=constantes() {return t;}
    | operacionParentesis() )

    (operadores() ( <LOGICO_NOT> )* (<VARIABLE> {    //EXISTENCIA DE IDENTIFICADORES
                                                     // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                                        if(!TablaIdentificadores.checkExistenciaId(token)){
                                                            tabla.add("El identificador: " + token.image + " no existe, error en la linea:" +
                                                            token.beginLine + " en la columna:" + token.beginColumn);
                                                        }
}
    | t=constantes() {return t;} | operacionParentesis() ))*
}

void operacionParentesis():{}{
    <PAREN_ABIERTO> operacion() <PAREN_CERRADO>
}

void operadores():{}{
    operadoresAritmeticos() | operadoresLogicos() | operadoresRelacionales()
}

void operadoresAritmeticos():{}{
    <SUMA> | <RESTA> | <MULTIPLICACION> | <DIVISION> | <MODULO>
}

void operadoresRelacionales():{}{
    <OPERADOR_IGUAL> | <OPERADOR_DIFERENTE> | <OPERADOR_MAYOR> | <OPERADOR_MAYOR_IGUAL> | <OPERADOR_MENOR> | <OPERADOR_MENOR_IGUAL>
}

void operadoresLogicos():{}{
    <LOGICO_AND> | <LOGICO_OR>
}

//DECLARACION DE VARIABLES:COMPROBACION DE TIPOS
void declaracionVariables():{
    Token identificador = new Token();
    Token asignado = new Token();
    String tipoDato = "";
 }{
    <DEFINIR>
    tipoDato=tiposDato()
    <VARIABLE> {
                        if(TablaIdentificadores.checkExistenciaId(token)){
                            System.out.println("Ya existe el token: " + token.image);
                            tabla.add("El identificador: " + token.image + " ya existe, error en la linea");
                        }else{
                            TablaIdentificadores.insertarIdentificadores(token,tipoDato);
                            identificador = token;
                        }
                    }

    (asignado=asignacion())? { //Se evavlua si se esta asignando el tipo correcto al identificador
                    if(asignado.kind != 0){
                              System.out.println("identificador: " + identificador.image);
                                  System.out.println("asignado: " + asignado.image);
                                  if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){
                                      tabla.add("El token: " + asignado.image + " no corresponde al tipo:" +
                                        TablaIdentificadores.obtenerTipo(identificador));
                                  }
                          }
}
}
String tiposDato():{ }{
    // Regresamos el patron que coincide con el token
    <ENTERO> {return token.image;}
    | <FLOTANTE> {return token.image;}
    | <CADENA> {return token.image;}
    |<CARACTER> {return token.image;}
    | <BOOLEANO> {return token.image;}
}

void leerDato():{}{

    <LEER> <VARIABLE> <DELIMITADOR>
}

void imprimirDato():{}{
    //Modificar estructura
    LOOKAHEAD(3)<ESCRIBIR> <CADENA_TEXTO> <DELIMITADOR>
    |LOOKAHEAD(3)<ESCRIBIR><CADENA_TEXTO><COMA><VARIABLE><DELIMITADOR>
    //<ESCRIBIR> ( constantes() | <VARIABLE> ) <DELIMITADOR>
}

void sentenciaSi():{}{

    <INICIO_CONDICIONAL_SI> condicion() <ENTONCES> ( sentencias() )+
    ( <CONDICIONAL_SINO> ( sentencias() )+ )?
    <FIN_CONDICIONAL_SI>
}



void sentenciaSegun():{}{

    <INICIO_CONDICIONAL_SEGUN> <VARIABLE> <HACER>
    ( <CASO> constantes() <OPERADOR_DOS_PUNTOS> ( sentencias() )+ )+
    ( <CASO_PREDETERMINADO> <OPERADOR_DOS_PUNTOS> ( sentencias() )+ )?
    <FIN_SEGUN>
}

void sentenciaPara():{}{

    <INICIO_CICLO_PARA> (<VARIABLE> <ASIGNACION> ( constantes() | <VARIABLE> ) | declaracionVariables() )
    <CONDICION_CICLO_PARA> condicion() <INCREMENTO_CICLO_PARA> ( <NUMERO_ENTERO> | <NUMERO_DECIMAL> )
    ( sentencias() )+
    <FIN_CICLO_PARA>
}

void sentenciaRepetir():{}{

    <INICIO_CICLO_REPETIR> ( sentencias() )+
    <CONDICION_CICLO_REPETIR> condicion() <DELIMITADOR>
}

void sentenciaMientras():{}{

    <INICIO_CICLO_MIENTRAS> condicion() <HACER>
    ( sentencias() )+
    <FIN_CICLO_MIENTRAS>
}

