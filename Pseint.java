/* Generated By:JavaCC: Do not edit this line. Pseint.java */
    public class Pseint implements PseintConstants {
        public static void main(String[] args) {
            try{
                Pseint pseint = new Pseint(System.in);
                pseint.programa();
                System.out.println("\nCompilacion completada con exito");
              }catch(Exception e){
                System.out.println(e.getMessage());
              }
          }

// Gramaticas
  final public void programa() throws ParseException {
    jj_consume_token(INICIO);
    label_1:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CICLO_REPETIR:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(0);
  }

  final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMENTARIO:
      jj_consume_token(COMENTARIO);
      break;
    case VARIABLE:
      sentenciaAsignacion();
      break;
    case DEFINIR:
      sentenciaDeclaracionVariables();
      break;
    case LEER:
      leerDato();
      break;
    case ESCRIBIR:
      imprimirDato();
      break;
    case INICIO_CONDICIONAL_SI:
      sentenciaSi();
      break;
    case INICIO_CONDICIONAL_SEGUN:
      sentenciaSegun();
      break;
    case INICIO_CICLO_PARA:
      sentenciaPara();
      break;
    case INICIO_CICLO_REPETIR:
      sentenciaRepetir();
      break;
    case INICIO_CICLO_MIENTRAS:
      sentenciaMientras();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sentenciaAsignacion() throws ParseException {
    jj_consume_token(VARIABLE);
    asignacion();
    jj_consume_token(DELIMITADOR);
  }

  final public void sentenciaDeclaracionVariables() throws ParseException {
    declaracionVariables();
    jj_consume_token(DELIMITADOR);
  }

  final public void tiposDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case FLOTANTE:
      jj_consume_token(FLOTANTE);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    case BOOLEANO:
      jj_consume_token(BOOLEANO);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void constantes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
      break;
    case CADENA_TEXTO:
      jj_consume_token(CADENA_TEXTO);
      break;
    case CARACTER_TEXTO:
      jj_consume_token(CARACTER_TEXTO);
      break;
    case BOOLEANO_FALSO:
      jj_consume_token(BOOLEANO_FALSO);
      break;
    case BOOLEANO_VERDADERO:
      jj_consume_token(BOOLEANO_VERDADERO);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      break;
    case ASIGNACION_COMPUESTA:
      jj_consume_token(ASIGNACION_COMPUESTA);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    condicion();
  }

  final public void operacion() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_NOT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(LOGICO_NOT);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    case CADENA_TEXTO:
    case CARACTER_TEXTO:
    case NUMERO_ENTERO:
    case NUMERO_DECIMAL:
    case BOOLEANO_FALSO:
    case BOOLEANO_VERDADERO:
      constantes();
      break;
    case PAREN_ABIERTO:
      operacionParentesis();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTIPLICACION:
      case DIVISION:
      case MODULO:
      case LOGICO_AND:
      case LOGICO_OR:
      case OPERADOR_IGUAL:
      case OPERADOR_DIFERENTE:
      case OPERADOR_MAYOR:
      case OPERADOR_MENOR:
      case OPERADOR_MAYOR_IGUAL:
      case OPERADOR_MENOR_IGUAL:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      operadores();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGICO_NOT:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        jj_consume_token(LOGICO_NOT);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
        break;
      case CADENA_TEXTO:
      case CARACTER_TEXTO:
      case NUMERO_ENTERO:
      case NUMERO_DECIMAL:
      case BOOLEANO_FALSO:
      case BOOLEANO_VERDADERO:
        constantes();
        break;
      case PAREN_ABIERTO:
        operacionParentesis();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void operacionParentesis() throws ParseException {
    jj_consume_token(PAREN_ABIERTO);
    operacion();
    jj_consume_token(PAREN_CERRADO);
  }

  final public void operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
    case MULTIPLICACION:
    case DIVISION:
    case MODULO:
      operadoresAritmeticos();
      break;
    case LOGICO_AND:
    case LOGICO_OR:
      operadoresLogicos();
      break;
    case OPERADOR_IGUAL:
    case OPERADOR_DIFERENTE:
    case OPERADOR_MAYOR:
    case OPERADOR_MENOR:
    case OPERADOR_MAYOR_IGUAL:
    case OPERADOR_MENOR_IGUAL:
      operadoresRelacionales();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operadoresAritmeticos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTIPLICACION:
      jj_consume_token(MULTIPLICACION);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operadoresRelacionales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_IGUAL:
      jj_consume_token(OPERADOR_IGUAL);
      break;
    case OPERADOR_DIFERENTE:
      jj_consume_token(OPERADOR_DIFERENTE);
      break;
    case OPERADOR_MAYOR:
      jj_consume_token(OPERADOR_MAYOR);
      break;
    case OPERADOR_MAYOR_IGUAL:
      jj_consume_token(OPERADOR_MAYOR_IGUAL);
      break;
    case OPERADOR_MENOR:
      jj_consume_token(OPERADOR_MENOR);
      break;
    case OPERADOR_MENOR_IGUAL:
      jj_consume_token(OPERADOR_MENOR_IGUAL);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operadoresLogicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGICO_AND:
      jj_consume_token(LOGICO_AND);
      break;
    case LOGICO_OR:
      jj_consume_token(LOGICO_OR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracionVariables() throws ParseException {
    jj_consume_token(DEFINIR);
    tiposDato();
    jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
    case ASIGNACION_COMPUESTA:
      asignacion();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void leerDato() throws ParseException {
    jj_consume_token(LEER);
    jj_consume_token(VARIABLE);
    jj_consume_token(DELIMITADOR);
  }

  final public void imprimirDato() throws ParseException {
    jj_consume_token(ESCRIBIR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA_TEXTO:
    case CARACTER_TEXTO:
    case NUMERO_ENTERO:
    case NUMERO_DECIMAL:
    case BOOLEANO_FALSO:
    case BOOLEANO_VERDADERO:
      constantes();
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DELIMITADOR);
  }

  final public void sentenciaSi() throws ParseException {
    jj_consume_token(INICIO_CONDICIONAL_SI);
    condicion();
    jj_consume_token(ENTONCES);
    label_5:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CICLO_REPETIR:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONDICIONAL_SINO:
      jj_consume_token(CONDICIONAL_SINO);
      label_6:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMENTARIO:
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CICLO_REPETIR:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(FIN_CONDICIONAL_SI);
  }

// var1 + 5 < var2 - 2 || 3 + 6 != val3 % 5  <- Lograr esto (Hecho)
  final public void condicion() throws ParseException {
    operacion();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERADOR_IGUAL:
      case OPERADOR_DIFERENTE:
      case OPERADOR_MAYOR:
      case OPERADOR_MENOR:
      case OPERADOR_MAYOR_IGUAL:
      case OPERADOR_MENOR_IGUAL:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      operadoresRelacionales();
      operacion();
    }
  }

  final public void sentenciaSegun() throws ParseException {
    jj_consume_token(INICIO_CONDICIONAL_SEGUN);
    jj_consume_token(VARIABLE);
    jj_consume_token(HACER);
    label_8:
    while (true) {
      jj_consume_token(CASO);
      constantes();
      jj_consume_token(OPERADOR_DOS_PUNTOS);
      label_9:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMENTARIO:
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CICLO_REPETIR:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASO_PREDETERMINADO:
      jj_consume_token(CASO_PREDETERMINADO);
      jj_consume_token(OPERADOR_DOS_PUNTOS);
      label_10:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMENTARIO:
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CICLO_REPETIR:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(FIN_SEGUN);
  }

  final public void sentenciaPara() throws ParseException {
    jj_consume_token(INICIO_CICLO_PARA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      jj_consume_token(VARIABLE);
      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA_TEXTO:
      case CARACTER_TEXTO:
      case NUMERO_ENTERO:
      case NUMERO_DECIMAL:
      case BOOLEANO_FALSO:
      case BOOLEANO_VERDADERO:
        constantes();
        break;
      case VARIABLE:
        jj_consume_token(VARIABLE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DEFINIR:
      declaracionVariables();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CONDICION_CICLO_PARA);
    condicion();
    jj_consume_token(INCREMENTO_CICLO_PARA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CICLO_REPETIR:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(FIN_CICLO_PARA);
  }

  final public void sentenciaRepetir() throws ParseException {
    jj_consume_token(INICIO_CICLO_REPETIR);
    label_12:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CICLO_REPETIR:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(CONDICION_CICLO_REPETIR);
    condicion();
    jj_consume_token(DELIMITADOR);
  }

  final public void sentenciaMientras() throws ParseException {
    jj_consume_token(INICIO_CICLO_MIENTRAS);
    condicion();
    jj_consume_token(HACER);
    label_13:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CICLO_REPETIR:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
    }
    jj_consume_token(FIN_CICLO_MIENTRAS);
  }

  /** Generated Token Manager. */
  public PseintTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1d0000,0x1d0000,0xf8,0xfc00,0x80400000,0x40000000,0xfc00,0x3f800000,0x40000000,0xfc00,0x3f800000,0xf800000,0x0,0x30000000,0x80400000,0xfc00,0x1d0000,0x1d0000,0x0,0x0,0x1d0000,0x0,0x1d0000,0x0,0xfc00,0x100000,0x3000,0x1d0000,0x1d0000,0x1d0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x422a200,0x422a200,0x0,0x0,0x0,0x0,0x4000080,0x3f,0x0,0x4000080,0x3f,0x0,0x3f,0x0,0x0,0x4000000,0x422a200,0x422a200,0x80000,0x3f,0x422a200,0x400000,0x422a200,0x800000,0x4000000,0x4000000,0x0,0x422a200,0x422a200,0x422a200,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Pseint(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Pseint(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PseintTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Pseint(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PseintTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Pseint(PseintTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PseintTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
