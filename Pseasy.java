/* Generated By:JavaCC: Do not edit this line. Pseasy.java */
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.util.HashMap;
public class Pseasy implements PseasyConstants {


        static ArrayList<String> tabla = PseasyTokenManager.tabla;

        //Variable para guardar el elemento asignado
        static String valorAsignado = null;

        //Arreglo para guardar lo generado por el codigo intermedio
        static ArrayList<String> codigoIntermedio = new ArrayList();

        //Arreglo para guardar variables temporales
        static ArrayList<String> listaTemporales = new ArrayList();



        //Mapa que guarda las constantes del programa
        static HashMap<String,String> constantes = PseasyTokenManager.constantes;



        //Variables para generacion de codigo intermedio
        private static int tmpContador = 0;
        private static int etContador = 0;

        //Sentencias a quitar (optimizacion de ciclos)
        private static int numSentencia = 0;

        //-------------------- CODIGO OBJETO -------------------------------
        //Archivo donde se guarda el codigo a ejecutar
        CodigoObjeto objeto = new CodigoObjeto("codigoObjeto.cpp");
        static String comandos = "cmd /k start C:/Users/gonza/compilador/ejecucion.bat";

        public static void main(String[] args) {
            try{
                Pseasy pseasy = new Pseasy(System.in);
                pseasy.programa();

                if(tabla.size() != 0){
                    //Eliminar el archivo
                    if(CodigoObjeto.f.exists()){CodigoObjeto.f.delete();}
                    System.out.println("PROGRAM ERRORS");
                    System.out.println("=================");
                    for(String i:tabla){
                        System.out.println(i);
                    }
                }else{
                    System.out.println("\ncompilation generated with success");
                    ArchivoCodigoIntermedio.escribirArchivo(codigoIntermedio); //Aqui se genera el archivo de codigo intermedio




                    //CODIGO OPTIMIZADO
                    //Optimizacion local
                    progacionConstantes(codigoIntermedio);

                    //Optimizacion de ciclos
                    //Loop Unrolling (Expansion de bucles) - Eliminar o reducir el numero de iteraciones
                    //Comprobamos si en el archivo existe un ciclo while
                    //System.out.println(obtenerInicioCiclo(codigoIntermedio));
                    if(obtenerInicioCiclo(codigoIntermedio) > 0){
                        //System.out.println("Entramos al ciclo");
                        reduccionFrecuencia(codigoIntermedio);
                    }


                    ArchivoOptimizado.escribirArchivo(codigoIntermedio);

                    //Generacion de codigo objeto
                        CodigoObjeto.sentenciaFinal();
                        Runtime.getRuntime().exec(comandos);

                }
              }catch(Exception e){
                System.out.println(e.getMessage());
              }
          }



          //METODOS PARA LA GENERACION DE CODIGO INTERMEDIO
          private static void agregarCodigoIntermedio(String codigo){
            codigoIntermedio.add(codigo);
          }

          private static String generarTmp(){
            tmpContador++;
            String aux= "tmp" + tmpContador;
            listaTemporales.add(aux);
            return aux;
          }
          private static String generarEq(){
            etContador++;
            return "etq"+etContador;
          }
          private static class BloqueCondicion{
            String etqVerdad,etqFalso;
          }

          //Obtiene el ultimo elemento en nuestra lista de variables temporales
          private static String obtenerUltimoTmp(){
            if(listaTemporales.size() > 0)
            {
                int indexUltimo = listaTemporales.size() -1;
                return listaTemporales.get(indexUltimo);
            }
                return null;
          }

          //Eliminar lista de temporales
          private static void limpiarTemporales(){
            if(listaTemporales.size() > 0){
                listaTemporales.clear();
            }
          }

          private static void generarOperacionAsignacion(String id, String exp){
            String tmp = id +"=" + exp + "\n";
            codigoIntermedio.add(tmp);
          }



          private static String generarOperacionAritmetica(String op,String ex1, String ex2){

                String aux = generarTmp();
                String cI = aux + "=" + ex1 + op + ex2 + "\n";
                codigoIntermedio.add(cI);
                return aux;
          }

          //METODOS PARA GENERAR EL CODIGO INTERMEDIO EN CONDICIONES
          private static void generarLabel( String label){
            codigoIntermedio.add("label " + label + "\n");
          }
          private static void generarLabel(String tipo, String label){
            codigoIntermedio.add(tipo +":"+ "label " + label + "\n");
          }
          private static void generarGoto(String label){
            codigoIntermedio.add("\tgoto " + label + "\n");
          }

          private BloqueCondicion generarOperacionRelacional(String e1, String e2, String op){
            BloqueCondicion bloque = new BloqueCondicion();
            bloque.etqVerdad = generarEq();
            bloque.etqFalso = generarEq();
            codigoIntermedio.add("\tif " +e1 +op +e2 +" goto "+bloque.etqVerdad + "\n");
            generarGoto(bloque.etqFalso);
            return bloque;
          }

          private static void interCondicion(BloqueCondicion bloque){
            String aux = bloque.etqVerdad;
            bloque.etqVerdad = bloque.etqFalso;
            bloque.etqFalso = aux;
          }

          // METODOS PARA LA OPTIMIZACION DE CODIGO INTERMEDIO
          //Optimizacion local
          private static void progacionConstantes(ArrayList<String>codigoIntermedio){

                 int index=0;
                 String tmp;
                 //Aqui se guardan asignaciones tipo id = valor
                 HashMap<String,String>constantes = new HashMap();
                 String aux[];
                 //Recorrer el arrelgo de codigo intermedio
                 for(String codigo:codigoIntermedio){
                      //Buscar sentencia de asignacion

                      aux= codigo.trim().split("="); //Convierte cadena de String a un arreglo

                      //Comprobamos que estemos usando expresiones tipo id=valor
                      if(aux.length > 1){
                      //Comprobar si tenemos la estructura tipoDato id = valor
                      if(codigo.trim().matches("(entero|flotante|booleano|cadena) [a-zA-Z]+_?[0-9]*=[0-9]+")){
                          String identificador[] = aux[0].split(" "); //Separamos la cadena tipoDato id
                          //System.out.println(identificador[1]);
                          constantes.put(identificador[1],aux[1]);
                      }
                        //Comprobamos estructura id = valor
                      else if(codigo.trim().matches("[a-zA-Z]+_?[0-9]*=[0-9]+")) {

                          constantes.put(aux[0],aux[1]);// Guardamos identificador y su valor numerico
                                //System.out.println(aux[1]);
                      //Comprobamos si la sentencia de asignacion se este utilizando una constante ya declarada
                      }else if(!aux[1].matches("tmp[0-9]+")){

                            index = codigoIntermedio.indexOf(codigo);

                                    //aux[1]= aux[1].replace("x","10");
                                    aux[1]= encontrarId(aux[1],constantes);
                                    tmp  =  aux[0] + "=" + aux[1] + "\n";
                                   codigoIntermedio.set(index,tmp);

                                //System.out.println(aux[1]);
                       }
                      }
                    }
                 }


          private static String encontrarId(String asignacion,HashMap<String,String> constantes){
            String res=asignacion;
                for(String constante:constantes.keySet()){
                    if(res.contains(constante)){
                        res = res.replace(constante,constantes.get(constante));
                    }
                }
                return res;
          }

          //OPTIMIZACION DE BUCLES
          private static void reduccionFrecuencia(ArrayList<String>codigoIntermedio){
                //Obtenemos la sentencias que podemos quitar de nuestro ciclo while
                ArrayList<String> sentenciasQuitarCiclo = encontrarSentenciaQuitar(codigoIntermedio);
                //System.out.println("Sentencias a quitar:"+ sentenciasQuitarCiclo.size());
                int contador = 0;
                if(sentenciasQuitarCiclo.size()>0){
                   //Ejecutar esto depediendo de cuentas sentencias hemos encontrado
                   //Obtenemos el indice en donde inicia el ciclo
                   int indexInicioCiclo = obtenerInicioCiclo(codigoIntermedio);

                   for(String c:sentenciasQuitarCiclo){
                       //Quitamos la sentencia de nuestro ciclo
                      codigoIntermedio.remove(c);

                      //La colocamos antes de inicio del ciclo
                      codigoIntermedio.add(indexInicioCiclo+contador,c);
                      contador++;
                   }

                }





          }
          private static int obtenerInicioCiclo(ArrayList<String>codigoIntermedio){
            //Obtenemos el indice donde empieza el bucle while
            int index=0;
            for(String codigo:codigoIntermedio){
                if(codigo.trim().contains("wh:")){
                    index = codigoIntermedio.indexOf(codigo);
                    break;
                }
            }
            return index;
          }

          //Este metodo encuentra las variables que cambian en cada iteracion del ciclo
          private static String encontratVariableCiclo(ArrayList<String>codigoIntermedio){
                String variableCiclo = "";
                int indexInicioCiclo = obtenerInicioCiclo(codigoIntermedio);

                //Obtener la condicion que tiene la variable que ira cambiando
                String condicionSentencia = codigoIntermedio.get(indexInicioCiclo+1);

                //Extraemos la variable que ira cambiando a lo largo del ciclo
                int indexInicial = condicionSentencia.indexOf("if") + 3; //Posicion del if
                int indexFinal = condicionSentencia.indexOf("goto");

                String condicion = condicionSentencia.substring(indexInicial,indexFinal);
                //System.out.println("Condicion " + condicion);
                //Recorrer el String
                String aux = "";
                for(char caracter:condicion.toCharArray()){
                        aux = String.valueOf(caracter); //Lo convertimos a un caracter para poder aplicar una expresion regular
                        //Identificar si un identificador: [a-zA-Z]+_?[0-9]*
                        if(aux.matches("[a-zA-Z]+_?[0-9]*"))
                        {
                            variableCiclo=aux;
                        }
                }
                //System.out.println("variable ciclo " + variableCiclo);

                return variableCiclo;
          }

          private static ArrayList<String> encontrarSentenciaQuitar(ArrayList<String>codigoIntermedio){
            ArrayList<String> sentenciasQuitar = new ArrayList();
            //Obtenemos la seccion donde se encuentra nuestro ciclo while
                        List<String> ciclo =  encontrarCiclo(codigoIntermedio);

                        String sentenciaQuitar = ""; //Se guarda la sentencia que deseamos quitar de nuestro arreglo
                        for(String c:ciclo){
                            //Nos enfocamos en aquellas sentencias donde se asigne un valor a una variable temporal
                            if(c.trim().matches("tmp[0-9]+=.+")){


                                //Se compara la sentencia de asignacion de variable temporal no usa la variable
                                // que se ira cambiando a lo largo del bucle
                                if(!c.trim().contains(encontratVariableCiclo(codigoIntermedio))){
                                        sentenciaQuitar= c;
                                        //System.out.println("Sentencia a quitar:"+ sentenciaQuitar);
                                        sentenciasQuitar.add(c);
                                }
                            }
                            //Nos enfocamos en las sentencias de asignacion a una variable no temporal
                            else if(c.trim().matches("[a-zA-Z]+_?[0-9]*=.+")){
                                //Si esa variable que queremos asignar no es una variable dinamica
                                //Podemos quitarla de nuestro ciclo
                                if(!c.trim().contains(encontratVariableCiclo(codigoIntermedio))){
                                    sentenciaQuitar= c;
                                    //System.out.println("Sentencia a quitar:"+ sentenciaQuitar);
                                    sentenciasQuitar.add(c);
                                }
                            }
                        }
                        return sentenciasQuitar;
          }

          private static List<String> encontrarCiclo(ArrayList<String>codigoIntermedio){
            //Obtenemos el indice donde empieza el bucle while
                       int index=obtenerInicioCiclo(codigoIntermedio);


                        //System.out.println("Ciclo inicio:"+ index);
                        //Obtenemos la etiqueta de cierre del bucle
                        String etqFinCiclo = codigoIntermedio.get(index).trim().substring(9);
                        //System.out.println(etqFinCiclo);

                        //Obtenemos el indice donde se encuentra la etiqueta de cierre
                        int indexFinal=0;

                        for(String codigo:codigoIntermedio){
                                if(codigo.trim().contains("wh:")){
                                    continue;
                                }else if(codigo.trim().contains(etqFinCiclo)){indexFinal=codigoIntermedio.indexOf(codigo);}
                        }
                        //System.out.println("Ciclo final:"+ indexFinal);

                        //Obtener un sub arreglo que contenga solo la parte del arreglo

                        return codigoIntermedio.subList(index,indexFinal);
          }

// Gramaticas

//CAMBIO: Nuestro programa puede no tener sentencias entre Algoritmo y FinAlgoritmo
  final public void programa() throws ParseException {
    try {
      jj_consume_token(INICIO);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      jj_consume_token(FIN);

    } catch (ParseException e) {
            Token t;
            do{
                t=getNextToken();
            }while(t.kind != EOF);


            tabla.add("Parser Error:" + e.getMessage());
    }
  }

  final public void sentencias() throws ParseException {
    TablaIdentificadores.inicializarTipos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      sentenciaAsignacion();
      break;
    case DEFINIR:
      sentenciaDeclaracionVariables();
      break;
    case LEER:
      leerDato();
      break;
    case ESCRIBIR:
      imprimir();
      break;
    case INICIO_CONDICIONAL_SI:
      sentenciaSi();
      break;
    case INICIO_CONDICIONAL_SEGUN:
      sentenciaSegun();
      break;
    case INICIO_CICLO_PARA:
      sentenciaPara();
      break;
    case INICIO_CICLO_MIENTRAS:
      sentenciaMientras();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sentenciaAsignacion() throws ParseException {
    String identificador = null;
    String asignado = null;
    try {
      jj_consume_token(VARIABLE);
                        //EXISTENCIA DE IDENTIFICADORES
                        // Sino existe el id, lo guardamos en nuestra arreglo de errores
                        //System.out.println("Token:" + token);
                         if(!TablaIdentificadores.checkExistenciaId(token.image)){
                               tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                       token.beginLine + " column:" + token.beginColumn);
                         }else{
                            identificador = token.image;
                            CodigoObjeto.EscribirCod(token.image);
                         }
      asignado = asignacion();
                                //Se evalua si se esta asignando el tipo correcto al identificador

                        //--- PARTE SEMANTICA: COMPROBACION DE TIPOS
                        if(valorAsignado != null && identificador !=null){
                                  //Si asignado e identificador tienen un valor asignado, se comprueban que sean del mismo tipo
                                if(!TablaIdentificadores.verifiacionConToken(identificador,valorAsignado)){

                                    tabla.add("The token: " + valorAsignado + " doesn't correspond to the " +
                                            TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");

                                // ----- GENERACION CODIGO INTERMEDIO
                                //Si esta bien semanticamente, lo pasamos a codigo intermedio
                                }else{
                                     if(valorAsignado.matches("\\d+")){
                                        constantes.put(identificador,valorAsignado);
                                     }
                                     generarOperacionAsignacion(identificador,asignado);
                                      valorAsignado = null;
                                }

                        }
      jj_consume_token(DELIMITADOR);
                       CodigoObjeto.EscribirCod(";\n");
    } catch (ParseException e) {
        //System.out.println(e.toString());
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

//Probar manejo de errores
  final public void sentenciaDeclaracionVariables() throws ParseException {
    try {
      declaracionVariables();
      jj_consume_token(DELIMITADOR);
                                               CodigoObjeto.EscribirCod(";\n");
    } catch (ParseException e) {
            //System.out.println(e.toString());
            Token t;
            do{
                t=getNextToken();
                //VERIFICAR ERROR DE PUNTO Y COMA AL FINAL
            }while(t.kind != DELIMITADOR && t.kind != EOF);
            tabla.add("Parser error:" + e.getMessage());
    }
  }

//CAMBIAMOS el tipo de dato retornado a token
  final public String constantes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                     CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                         CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    case CADENA_TEXTO:
      jj_consume_token(CADENA_TEXTO);
                      CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    case BOOLEANO_FALSO:
      jj_consume_token(BOOLEANO_FALSO);
                        CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    case BOOLEANO_VERDADERO:
      jj_consume_token(BOOLEANO_VERDADERO);
                            CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//ASIGNACION CORRECTA DE VALORES
  final public String asignacion() throws ParseException {
                     String asignado = "";
    jj_consume_token(ASIGNACION);
                  CodigoObjeto.EscribirCod("= ");
    asignado = tipoOperacion();
                    {if (true) return asignado;}
    throw new Error("Missing return statement in function");
  }

/*INICIA MODIFICACION DE FUNCIONES BNF*/
  final public String tipoOperacion() throws ParseException {
                         String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
    case NUMERO_DECIMAL:
    case PAREN_ABIERTO:
    case VARIABLE:
      t = operacionAritmetica();
      break;
    case CADENA_TEXTO:
      t = operacionConcatenacion();
      break;
    case BOOLEANO_FALSO:
    case BOOLEANO_VERDADERO:
      t = asignarBooleano();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String operacionAritmetica() throws ParseException {
                              String e1=""; String e2="";
    e1 = nivelSegundoJerarquia();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
                                          CodigoObjeto.EscribirCod("+ ");
        e2 = nivelSegundoJerarquia();
                                                                                                       e1=generarOperacionAritmetica("+",e1,e2);
        break;
      case RESTA:
        jj_consume_token(RESTA);
                                  CodigoObjeto.EscribirCod("- ");
        e2 = nivelSegundoJerarquia();
                                                                                              e1=generarOperacionAritmetica("-",e1,e2);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                 {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//Funciones para la jerarquia de operadores
  final public String nivelSegundoJerarquia() throws ParseException {
                                String e1; String e2;
    e1 = terminalesNumeros();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case DIVISION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
                                                CodigoObjeto.EscribirCod("* ");
        e2 = terminalesNumeros();
                                                                                                        e1=generarOperacionAritmetica("*",e1,e2);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
                                          CodigoObjeto.EscribirCod("/ ");
        e2 = terminalesNumeros();
                                                                                                   e1=generarOperacionAritmetica("/",e1,e2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                               {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public String terminalesNumeros() throws ParseException {
                            String t="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                      t=token.image; valorAsignado=token.image; CodigoObjeto.EscribirCod(token.image + " ");
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                       t=token.image;valorAsignado=token.image;CodigoObjeto.EscribirCod(token.image + " ");
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
                    //EXISTENCIA DE IDENTIFICADORES
                 // Sino existe el id, lo guardamos en nuestra arreglo de errores
                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                        tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                        token.beginLine + " column:" + token.beginColumn);
                    }else{
                        t=token.image;
                        valorAsignado=token.image;
                        CodigoObjeto.EscribirCod(token.image + " ");
                    }
      break;
    case PAREN_ABIERTO:
      jj_consume_token(PAREN_ABIERTO);
      t = operacionAritmetica();
      jj_consume_token(PAREN_CERRADO);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//Checar este caso
  final public String operacionConcatenacion() throws ParseException {
                                 String ex;
    jj_consume_token(CADENA_TEXTO);
                   ex=token.image; valorAsignado=token.image; CodigoObjeto.EscribirCod(token.image + " ");
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(SUMA);
      jj_consume_token(CADENA_TEXTO);
                                                                                                                                   ex=token.image;
    }
     {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public String asignarBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEANO_VERDADERO:
      jj_consume_token(BOOLEANO_VERDADERO);
                          valorAsignado=token.image;CodigoObjeto.EscribirCod("true "); ;{if (true) return token.image;}
      break;
    case BOOLEANO_FALSO:
      jj_consume_token(BOOLEANO_FALSO);
                       valorAsignado=token.image;CodigoObjeto.EscribirCod("false "); ;{if (true) return token.image;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//TERMINA MODIFICACION DE FUNCIONES BNF

/*
void operacionParentesis():{}{
    <PAREN_ABIERTO> operacion() <PAREN_CERRADO>
}

void operadores():{}{
    operadoresAritmeticos() | operadoresLogicos() | operadoresRelacionales()
}*/

//DECLARACION DE VARIABLES:COMPROBACION DE TIPOS
  final public void declaracionVariables() throws ParseException {
    String identificador = "";
    String asignado = "";
    String tipoDato = "";
    String aux;
    jj_consume_token(DEFINIR);
    tipoDato = tiposDato();
    jj_consume_token(VARIABLE);
                        if(TablaIdentificadores.checkExistenciaId(token.image)){

                            tabla.add("The identifier: " + token.image + " already exist, at line: " + token.beginLine + " column:" + token.endColumn);
                        }else{
                            TablaIdentificadores.insertarIdentificadores(token.image,tipoDato);
                            identificador = token.image;
                            CodigoObjeto.EscribirCod(token.image + " ");
                        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      asignado = asignacion();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                               //Se evalua si se esta asignando el tipo correcto al identificador
                    if(!asignado.equals("")){ //Comprobamos que el token asignado tenga un valor asociado y no sea nulo
                        //System.out.println("asignado =" + asignado);
                                  if(!TablaIdentificadores.verifiacionConToken(identificador,valorAsignado)){
                                      tabla.add("The token: " + valorAsignado + " doesn't correspond to the " +
                                        TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");
                                  }else{
                                      aux = tipoDato + " " + identificador + "=" +asignado + "\n";
                                      if(valorAsignado.matches("\\d+")){constantes.put(identificador,valorAsignado);}
                                      agregarCodigoIntermedio(aux);
                                  }
                    } else{
                    aux = tipoDato +" "+ identificador + "\n";
                    agregarCodigoIntermedio(aux);
                    }
  }

  final public String tiposDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
              CodigoObjeto.EscribirCod("int "); {if (true) return token.image;}
      break;
    case FLOTANTE:
      jj_consume_token(FLOTANTE);
                  CodigoObjeto.EscribirCod("double "); {if (true) return token.image;}
      break;
    case CADENA:
      jj_consume_token(CADENA);
                CodigoObjeto.EscribirCod("string "); {if (true) return token.image;}
      break;
    case BOOLEANO:
      jj_consume_token(BOOLEANO);
                  CodigoObjeto.EscribirCod("boolean "); {if (true) return token.image;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void leerDato() throws ParseException {
                 String leer; String variable = "";
    try {
      jj_consume_token(LEER);
               CodigoObjeto.EscribirCod("cin >> ");
      jj_consume_token(VARIABLE);
            //Antes de leer el dato y colocarlo en la variable, verificamos que la variable este declarada
            if(!TablaIdentificadores.checkExistenciaId(token.image)){

                tabla.add("The identifier: " + token.image + " doesn't exists, at line: " + token.beginLine + " column:" + token.endColumn);
            }else{
                variable=token.image;
                CodigoObjeto.EscribirCod(token.image + "");
            }
      jj_consume_token(DELIMITADOR);
                         agregarCodigoIntermedio("read " + variable );CodigoObjeto.EscribirCod(";\n");
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

/*SE MODIFICIARON LA SENTENCIA IMPRIMIR*/
  final public void imprimir() throws ParseException {
                 String texto; String variable;
    try {
      jj_consume_token(ESCRIBIR);
                CodigoObjeto.EscribirCod("cout << ");
      datoImprimir();
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != FIN);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

//Se agreggo un simbolo de concatenacion, el cual es <<
  final public void datoImprimir() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA_TEXTO:
    case NUMERO_ENTERO:
    case NUMERO_DECIMAL:
    case BOOLEANO_FALSO:
    case BOOLEANO_VERDADERO:
      constantes();
      concatenarValores();
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
                 CodigoObjeto.EscribirCod(token.image +" ");
      concatenarValores();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void concatenarValores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONCATENACION:
      jj_consume_token(CONCATENACION);
                     CodigoObjeto.EscribirCod(token.image +" ");
      datoImprimir();
      break;
    case DELIMITADOR:
      jj_consume_token(DELIMITADOR);
                     CodigoObjeto.EscribirCod("<< endl;\n");
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*  MODIFICAMOS LA FUNCION CONDICION*/
  final public BloqueCondicion condicion() throws ParseException {
                             BloqueCondicion c1,c2;
    c1 = condTerm();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(LOGICO_OR);
                                generarLabel(c1.etqFalso);CodigoObjeto.EscribirCod("|| ");
      c2 = condTerm();
                            generarLabel(c1.etqVerdad);
                            generarGoto(c2.etqVerdad);
                            c1=c2;
    }
                                      {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condTerm() throws ParseException {
                            BloqueCondicion c1; BloqueCondicion c2;
    c1 = condFact();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(LOGICO_AND);
                                 generarLabel(c1.etqVerdad);CodigoObjeto.EscribirCod("&& ");
      c2 = condFact();
                            generarLabel(c1.etqFalso);
                            generarGoto(c2.etqFalso);
                            c1=c2;
    }
                            {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condFact() throws ParseException {
 BloqueCondicion c1;
 boolean negado = false;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICO_NOT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(LOGICO_NOT);
                  negado = !negado; CodigoObjeto.EscribirCod(token.image +  " ");
    }
    c1 = condSimple();
        if(negado) interCondicion(c1);
        {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public BloqueCondicion condSimple() throws ParseException {
                              String ex1;String operador;String ex2;
    ex1 = terminalesBooleanas();
    operador = operadoresRelacionales();
    ex2 = tipoOperacion();
                        {if (true) return generarOperacionRelacional(ex1,ex2,operador);}
    throw new Error("Missing return statement in function");
  }

  final public String operadoresRelacionales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_IGUAL:
      jj_consume_token(OPERADOR_IGUAL);
                      CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case OPERADOR_DIFERENTE:
      jj_consume_token(OPERADOR_DIFERENTE);
                            CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case OPERADOR_MAYOR:
      jj_consume_token(OPERADOR_MAYOR);
                        CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case OPERADOR_MAYOR_IGUAL:
      jj_consume_token(OPERADOR_MAYOR_IGUAL);
                              CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case OPERADOR_MENOR:
      jj_consume_token(OPERADOR_MENOR);
                        CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case OPERADOR_MENOR_IGUAL:
      jj_consume_token(OPERADOR_MENOR_IGUAL);
                              CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String terminalesBooleanas() throws ParseException {
                              String t = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
                     CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
                      CodigoObjeto.EscribirCod(token.image + " ");{if (true) return token.image;}
      break;
    case CADENA_TEXTO:
      jj_consume_token(CADENA_TEXTO);
                     CodigoObjeto.EscribirCod(token.image + " "); {if (true) return token.image;}
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      //Comprobamos si la variable existe
     if(!TablaIdentificadores.checkExistenciaId(token.image)){

        tabla.add("The identifier: " + token.image + " doesnt exist, at line: " + token.beginLine + " column:" + token.endColumn);

     }else{
        CodigoObjeto.EscribirCod(token.image + " ");
        {if (true) return token.image;}
        }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void sentenciaSi() throws ParseException {
                    BloqueCondicion c; String etqFinSi;
    try {
      jj_consume_token(INICIO_CONDICIONAL_SI);
                                CodigoObjeto.EscribirCod("if (");
      c = condicion();
                                                                                 CodigoObjeto.EscribirCod(" ) ");
      jj_consume_token(ENTONCES);
                                                                                                                               CodigoObjeto.EscribirCod("{\n"); generarLabel(c.etqVerdad);
      label_8:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
      }
            etqFinSi = generarEq();
            generarGoto(etqFinSi);
            generarLabel(c.etqFalso);
            CodigoObjeto.EscribirCod("}");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDICIONAL_SINO:
        jj_consume_token(CONDICIONAL_SINO);
                                  CodigoObjeto.EscribirCod(" else {\n");
        label_9:
        while (true) {
          sentencias();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEER:
          case ESCRIBIR:
          case DEFINIR:
          case INICIO_CICLO_PARA:
          case INICIO_CICLO_MIENTRAS:
          case INICIO_CONDICIONAL_SI:
          case INICIO_CONDICIONAL_SEGUN:
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_9;
          }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(FIN_CONDICIONAL_SI);
                CodigoObjeto.EscribirCod(" }\n");
             generarLabel(etqFinSi);
    } catch (ParseException e) {
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
  }

  final public void sentenciaSegun() throws ParseException {
                       String ex ="";String finSegun; String finalCaso; String eCaso;
    jj_consume_token(INICIO_CONDICIONAL_SEGUN);
                                CodigoObjeto.EscribirCod("switch ");
    jj_consume_token(VARIABLE);
                if(!TablaIdentificadores.checkExistenciaId(token.image)){
                    tabla.add("The identifier: " + token.image + " doesn`t exist, at line: " +
                    token.beginLine + " column:" + token.endColumn);
                        }
                else {ex=token.image;CodigoObjeto.EscribirCod("("+ token.image + "){\n");}
    jj_consume_token(HACER);
    label_10:
    while (true) {
      jj_consume_token(CASO);
             CodigoObjeto.EscribirCod("case ");
      eCaso = constantes();
      jj_consume_token(OPERADOR_DOS_PUNTOS);
                                                                                          CodigoObjeto.EscribirCod(":\n");
      finalCaso = generarEq();
        agregarCodigoIntermedio("\tif " + ex + " != " + eCaso + " goto " + finalCaso + "\n");
        generarLabel(finalCaso);
      label_11:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(ROMPER_CASO);
      jj_consume_token(DELIMITADOR);
                                                CodigoObjeto.EscribirCod("break;\n");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASO_PREDETERMINADO:
      jj_consume_token(CASO_PREDETERMINADO);
      jj_consume_token(OPERADOR_DOS_PUNTOS);
                                                   CodigoObjeto.EscribirCod("default:\n");
      label_12:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEER:
        case ESCRIBIR:
        case DEFINIR:
        case INICIO_CICLO_PARA:
        case INICIO_CICLO_MIENTRAS:
        case INICIO_CONDICIONAL_SI:
        case INICIO_CONDICIONAL_SEGUN:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_12;
        }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(FIN_SEGUN);
                 finSegun = generarEq(); generarLabel(finSegun);CodigoObjeto.EscribirCod("}\n");
  }

//Ciclo for
  final public void sentenciaPara() throws ParseException {
                      BloqueCondicion c;String inicioPara; String ex1=""; String ex2;String variacion; String numVariacion; String simbolo;
    jj_consume_token(INICIO_CICLO_PARA);
                              inicioPara=generarEq();
                              generarLabel(inicioPara);
                              CodigoObjeto.EscribirCod("for( ");
    jj_consume_token(VARIABLE);
                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                       tabla.add("The identifier: " + token.image + " doesn`t exist, at line: " +
                       token.beginLine + " column:" + token.endColumn);
                           }
                    else{ex1=token.image; CodigoObjeto.EscribirCod(token.image +" ");}
    jj_consume_token(ASIGNACION);
                                   CodigoObjeto.EscribirCod(token.image + " ");
    ex2 = tipoOperacion();
                                                                                                      generarOperacionAsignacion(ex1,ex2); CodigoObjeto.EscribirCod("; ");
    jj_consume_token(CONDICION_CICLO_PARA);
    c = condicion();
                                                  generarLabel(c.etqVerdad);CodigoObjeto.EscribirCod("; ");
    variacion = variacionPara();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_ENTERO:
      jj_consume_token(NUMERO_ENTERO);
      break;
    case NUMERO_DECIMAL:
      jj_consume_token(NUMERO_DECIMAL);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                numVariacion=token.image;
                if(variacion.equals("inc"))
                {
                    simbolo = "+ ";
                }
                else{
                    simbolo = "- ";
                }
                CodigoObjeto.EscribirCod( ex1 + " = "+ ex1 +" "+ simbolo + numVariacion + "){\n");
    label_13:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
    }
                               agregarCodigoIntermedio("\t" + ex1 + " " + variacion + " " + numVariacion);
    jj_consume_token(FIN_CICLO_PARA);
                             generarGoto(inicioPara); generarLabel(c.etqFalso);CodigoObjeto.EscribirCod("}\n");
  }

  final public String variacionPara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO_CICLO_PARA:
      jj_consume_token(INCREMENTO_CICLO_PARA);
                             {if (true) return "inc";}
      break;
    case DECREMENTO_CICLO_PARA:
      jj_consume_token(DECREMENTO_CICLO_PARA);
                              {if (true) return "des";}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
//Ciclo do while
void sentenciaRepetir():{ }{

    <INICIO_CICLO_REPETIR> ( sentencias() )+
    <CONDICION_CICLO_REPETIR> condicion() <DELIMITADOR>
}*/

//Ciclo while
  final public void sentenciaMientras() throws ParseException {
                          BloqueCondicion c;String inicioWhile="";
    jj_consume_token(INICIO_CICLO_MIENTRAS);
                                inicioWhile=generarEq();
                               generarLabel("wh",inicioWhile);
                               CodigoObjeto.EscribirCod("while ( ");
    c = condicion();
    jj_consume_token(HACER);
                           generarLabel(c.etqVerdad); CodigoObjeto.EscribirCod("){\n");
    label_14:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
      case ESCRIBIR:
      case DEFINIR:
      case INICIO_CICLO_PARA:
      case INICIO_CICLO_MIENTRAS:
      case INICIO_CONDICIONAL_SI:
      case INICIO_CONDICIONAL_SEGUN:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_14;
      }
    }
    jj_consume_token(FIN_CICLO_MIENTRAS);
                          generarGoto(inicioWhile); generarLabel(c.etqFalso);CodigoObjeto.EscribirCod("}\n");
  }

  /** Generated Token Manager. */
  public PseasyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0000,0xe0000,0x3e00,0x3e00,0x600000,0x600000,0x1800000,0x1800000,0xc00,0x200000,0x3000,0x100000,0x78,0x3e00,0x4000,0x4000000,0x2000000,0x8000000,0xf0000000,0xe00,0xe0000,0xe0000,0x0,0xe0000,0x0,0xe0000,0x0,0xc00,0xe0000,0x0,0xe0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1088840,0x1088840,0x0,0x1000008,0x0,0x0,0x0,0x0,0x1000008,0x0,0x0,0x0,0x0,0x1000000,0x20,0x0,0x0,0x0,0x3,0x1000000,0x1088840,0x1088840,0x20000,0x1088840,0x100000,0x1088840,0x200000,0x0,0x1088840,0x300,0x1088840,};
   }

  /** Constructor with InputStream. */
  public Pseasy(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Pseasy(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PseasyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Pseasy(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PseasyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Pseasy(PseasyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PseasyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }

 // ------------------------ GENERACION CODIGO INTERMEDIO -----------------------------


 //CLASE PARA ESCRIBIR EL CODIGO INTERMEDIO EN UN ARCHIVO
class ArchivoCodigoIntermedio {

    public static void escribirArchivo(ArrayList<String>codigoIntermedio){
        String fileName = "codigo_intermedio.txt";
        File archivo = new File(fileName);
        try{
            PrintWriter salida = new PrintWriter(archivo);
            for(String e:codigoIntermedio){
                salida.print(e);
            }
            salida.close();
        }catch(FileNotFoundException ex){
            System.out.println("No se encontro el archivo");
        }
    }
}

// ------------------------ OPTIMIZACION CODIGO INTERMEDIO -----------------------------

//CLASE PARA GENERAR EL ARCHIVO OPTIMIZADO DE CODIGO INTERMEDIO
class ArchivoOptimizado{
    public static void escribirArchivo(ArrayList<String>codigoOptimizado){
        String fileName = "codigo_optimizado.txt";
                File archivo = new File(fileName);
                try{
                    PrintWriter salida = new PrintWriter(archivo);
                    for(String e:codigoOptimizado){
                        salida.print(e);
                    }
                    salida.close();
                }catch(FileNotFoundException ex){
                    System.out.println("No se encontro el archivo");
                }
    }
}
class TablaIdentificadores {

    // En este HashMap vamos a ir guardado los identificadores(String) y su tipo (String)
    //Un HashMap se compone de una llave(token) y un valor(tipo de dato)
    private static HashMap<String,String> tabla = new HashMap();

    private static ArrayList<Integer> enterosTipos = new ArrayList();
    private static ArrayList<Integer> flotantesTipos = new ArrayList();

    private static ArrayList<Integer> booleanosTipos = new ArrayList();

    private static ArrayList<Integer> cadenaTipos = new ArrayList();

    //En este metodo vamos agregando los identificadores

    //Modificamos
    public static void insertarIdentificadores(String token, String tipo){tabla.put(token,tipo);}

    public static void inicializarTipos(){
        //Guardamos el kind que hace referencia al dato primitivo de entero y el propio kind de entero
        enterosTipos.add(12);
        enterosTipos.add(3);

        //Asi se hace con el resto de valores
        flotantesTipos.add(13);
        flotantesTipos.add(4);

        booleanosTipos.add(14);
        booleanosTipos.add(15);
        booleanosTipos.add(7);

        cadenaTipos.add(10);
        cadenaTipos.add(5);

    }

    //Imprimir valores de la tabla
    public static void mostrarTabla(){
        for(String i:tabla.keySet()){
            System.out.println("Token:" + i + " tipo:" + tabla.get(i));
        }
    }


    //Verificamos la existencia del token en nuestra tabla
    public static boolean checkExistenciaId(String token){

        return tabla.containsKey(token);
    }
    //Obtenemos el tipo de dato del token a traves de la tabla identificadores
    public static String obtenerTipoidentificador(String t){
        return tabla.get(t);
    }


    private static int obtenerTipoKindIdentificador(String t){
        String tipoString = obtenerTipoidentificador(t);
        int kind = 0;
        String tmp = (tipoString != null)  ? tipoString.toLowerCase() : "nulo";
        switch (tipoString.toLowerCase()){
            case "nulo": kind = -1;
            case "entero": kind = 3;
            break;
            case "flotante": kind = 4;
            break;
            case "booleano": kind = 7;
            break;
            case "cadena": kind = 5;
            break;
        }
        return kind;
    }

    private static int obtenerkindAsignado(String t){
        int kind =0;
        //Utilizar expresiones regulares
        if(t.matches("\\d+")){
            //System.out.println("Es un entero");
            kind = 3;
        }else if(t.matches("falso") || t.matches("verdadero")){
            //System.out.println("Es un booleano");
            kind = 7;
        }else if(t.matches("\\d+[.]\\d+")){
            //System.out.println("Es un flotante");
            kind = 4;
        }else{
            //System.out.println("Es una cadena");
            kind = 5;
        }

        return kind;
    }

    //COMPROBACION DE TIPOS
    //ENTRE VARIABLE Y UN TERMINAL
    /*
    * Token identificador: hace referencia a la variable
    * Token asignado: hace referencia al terminal
    * */
    public static boolean verifiacionConToken(String identificador, String asignado){
        //Obtenemos el tipo de identificador en la tabla

        //System.out.println("kind de asignado:"+ asignado.kind);
        //System.out.println("Identificador:" + identificador);


            //Obtenemos el tipo de nuestro token identificador a partir de la tabla de simbolos
            String tipo = tabla.get(identificador).toLowerCase();
            int kind;

            //Evaluamos si asignado no es una variable
            //En dado caso que lo sea, obtenemos su tipo asociado
            if(obtenerTipoidentificador(asignado) == null){
                kind = obtenerkindAsignado(asignado);
            }else{
                //Si es un valor primitivo, aplicamos el metodo obtenerkindAsignado
                kind = obtenerTipoKindIdentificador(asignado);
            }




            //Si mi tipo del identificador es entero, comprobamos que el token asignado sea igual de tipo entero o relacionado
            if(tipo.equals("entero") && enterosTipos.contains(kind)){
                return true;
                //Si mi tipo del identificador es cadena, comprobamos que el token asignado sea igual de tipo cdena
            }else if(tipo.equals("cadena") && cadenaTipos.contains(kind)){
                return true;
            }else if(tipo.equals("booleano") && booleanosTipos.contains(kind)){
                return true;
            }else if(tipo.equals("flotante") && flotantesTipos.contains(kind)) {
                return true;
            }
            else {
                return false;
            }
    }
}
class CodigoObjeto{
    static File f;

    public CodigoObjeto(String nombreArchivo){
        f = new File(nombreArchivo);
        CleanCPP();
        EscribirCod(
            "#include <stdio.h>\n"+
            "#include <iostream>\n"+
            "#include <string>\n"+
            "using namespace std;\n"+
            "int main(){\n"
        );

    }

    public static void generarEnsamblador(){

        try{
            //Verificamos si el ejecutable existe
            File arch = new File("programa.exe");
            if(arch.exists()){arch.delete();}

            //Generamos el ejecutable
            String comando = "g++ -o programa codigoObjeto.cpp";
            Runtime.getRuntime().exec(comando);

            //Generamos el codigo en ensamblador
            comando = "g++ -S -masm=intel codigoObjeto.cpp";
            Runtime.getRuntime().exec(comando);

            while(!arch.exists()){}

            comando = "cmd /c start " + "programa.exe";
            ProcessBuilder build = new ProcessBuilder("cmd.exe","/c","/K",comando);
            Process proceso = build.start();

        }catch(IOException e){
            System.out.println("El comando no se puede ejecutar");
        }
    }

    public static void sentenciaFinal(){
        CodigoObjeto.EscribirCod("return 0;}\n");
    }

    public void CleanCPP(){
        try{
            FileWriter w = new FileWriter(f , false);

            BufferedWriter bw = new BufferedWriter(w);

            PrintWriter wr = new PrintWriter(bw);

            wr.write("");

            wr.close();
            bw.close();

        }catch(IOException e){
            System.out.println("No se puede limpiar");
        }
    }

    public static void EscribirCod(String s){
        try {

            FileWriter w = new FileWriter(f , true);

            BufferedWriter bw = new BufferedWriter(w);

            PrintWriter wr = new PrintWriter(bw);
            wr.write(s);

            wr.close();
            bw.close();
            } catch (java.io.IOException e) {
                e.printStackTrace();
                System.out.println("no se pudo escribir");
            }
    }
}
