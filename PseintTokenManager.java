/* Generated By:JavaCC: Do not edit this line. PseintTokenManager.java */

/** Token Manager. */
public class PseintTokenManager implements PseintConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000L) != 0L)
            return 51;
         if ((active0 & 0x20000000L) != 0L)
            return 53;
         if ((active0 & 0x84000000080000L) != 0L)
         {
            jjmatchedKind = 58;
            return 4;
         }
         if ((active0 & 0x22aa60000148002L) != 0L)
         {
            jjmatchedKind = 58;
            return 91;
         }
         if ((active0 & 0x1800000L) != 0L)
            return 92;
         if ((active0 & 0xe000000L) != 0L)
            return 50;
         if ((active0 & 0x111500000004004L) != 0L)
         {
            jjmatchedKind = 58;
            return 17;
         }
         if ((active0 & 0x40080000200000L) != 0L)
         {
            jjmatchedKind = 58;
            return 65;
         }
         return -1;
      case 1:
         if ((active0 & 0xa000000000000L) != 0L)
            return 91;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active0 & 0x331fe00003cc006L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 91;
         }
         if ((active0 & 0x84000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 3;
         }
         if ((active0 & 0x30000000L) != 0L)
            return 50;
         return -1;
      case 2:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 2;
         }
         if ((active0 & 0x379fe00003cc006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x48020000240000L) != 0L)
            return 91;
         if ((active0 & 0x335f4000018c006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x230000000004000L) != 0L)
            return 91;
         if ((active0 & 0x105f40000188006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x105f00000188006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x900000100000L) != 0L)
            return 91;
         if ((active0 & 0x105600000088006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x104200000080000L) != 0L)
            return 91;
         if ((active0 & 0x1400000008006L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 7;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8002L) != 0L)
            return 91;
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x400000000004L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x400000000004L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 9;
            return 91;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000000000L) != 0L)
            return 91;
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 10;
            return 91;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4L) != 0L)
            return 91;
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 33:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 37:
         return jjStartNfaWithStates_0(0, 27, 50);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjStartNfaWithStates_0(0, 25, 50);
      case 43:
         return jjStartNfaWithStates_0(0, 23, 92);
      case 45:
         return jjStartNfaWithStates_0(0, 24, 92);
      case 47:
         return jjStartNfaWithStates_0(0, 26, 50);
      case 58:
         return jjStopAtPos(0, 38);
      case 59:
         return jjStopAtPos(0, 17);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 61:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40080000200000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x84000000080000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x111500000004004L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x200040000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2a000000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 38:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 50);
         break;
      case 61:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x240060000004000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800000148000L);
      case 105:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x119700000000004L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000200000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 124:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000080000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000040000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000002L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x119580000000004L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000008000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000000L);
      case 97:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 91);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200800000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 91);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 91);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 91);
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000002L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 91);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000008000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 105:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 91);
         return jjMoveStringLiteralDfa5_0(active0, 0x480000080000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000004L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 91);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100000L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 91);
         break;
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 91);
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80a00000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000004L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000100002L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80300000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 91);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000008000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000004L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 91);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 91);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 91);
         break;
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 91);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000008004L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 91);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 91);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 91);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 91);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80400000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 91);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);
      case 111:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 2, 91);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(11, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L);
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(13, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(14, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x2000000020000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 91;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(85);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(6, 11);
                  }
                  else if ((0xac2000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 35)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(45, 46);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(12, 16);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 34 && kind > 10)
                     kind = 10;
                  break;
               case 44:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if (curChar == 39 && kind > 11)
                     kind = 11;
                  break;
               case 47:
                  if (curChar != 35)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0xac2000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if (curChar == 61 && kind > 31)
                     kind = 31;
                  break;
               case 51:
                  if (curChar == 38)
                     jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar != 46)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(0, 2);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(12, 16);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar == 46)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(6, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 92:
               case 59:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(57, 59);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 99)
                     jjAddStates(17, 18);
                  else if (curChar == 67)
                     jjAddStates(19, 20);
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 111 && kind > 3)
                     kind = 3;
                  break;
               case 1:
               case 6:
                  if (curChar == 114)
                     jjCheckNAdd(0);
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 101 && kind > 4)
                     kind = 4;
                  break;
               case 12:
               case 19:
                  if (curChar == 116)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 111 && kind > 7)
                     kind = 7;
                  break;
               case 27:
               case 34:
                  if (curChar == 110)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  jjAddStates(21, 22);
                  break;
               case 45:
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 53:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(56);
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if (curChar == 67)
                     jjAddStates(19, 20);
                  break;
               case 61:
                  if (curChar == 97 && kind > 5)
                     kind = 5;
                  break;
               case 62:
               case 74:
                  if (curChar == 110)
                     jjCheckNAdd(61);
                  break;
               case 63:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 114 && kind > 6)
                     kind = 6;
                  break;
               case 67:
               case 78:
                  if (curChar == 101)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 99)
                     jjAddStates(17, 18);
                  break;
               case 75:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 2:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 92:
               case 59:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(57, 59);
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 64:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 17:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 65:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(56);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(57, 59);
                  }
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 55:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(56);
                  break;
               case 58:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 91 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 58, 59, 89, 57, 59, 85, 86, 87, 89, 57, 59, 85, 86, 89, 57, 
   59, 77, 83, 65, 72, 42, 43, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\101\154\147\157\162\151\164\155\157", 
"\106\151\156\101\154\147\157\162\151\164\155\157", null, null, null, null, null, null, null, null, null, null, null, 
"\106\141\154\163\157", "\126\145\162\144\141\144\145\162\157", null, "\73", "\114\145\145\162", 
"\105\163\143\162\151\142\151\162", "\104\145\146\151\156\151\162", "\103\157\155\157", "\75", "\53", "\55", 
"\52", "\57", "\45", "\46\46", "\174\174", "\41", null, "\75\75", "\41\75", "\76", 
"\74", "\76\75", "\74\75", "\72", "\50", "\51", "\120\141\162\141", 
"\110\141\163\164\141\40\161\165\145", "\103\157\156\40\151\156\143\162\145\155\145\156\164\157", 
"\106\151\156\120\141\162\141", "\115\151\145\156\164\162\141\163", 
"\106\151\156\115\151\145\156\164\162\141\163", "\122\145\160\145\164\151\162", 
"\106\151\156\141\154\151\172\141\40\143\165\141\156\144\157", "\123\151", "\105\156\164\157\156\143\145\163", "\123\151\156\157", 
"\106\151\156\123\151", "\123\145\147\165\156", "\103\141\163\157", 
"\105\156\40\157\164\162\157\40\143\141\163\157", "\106\151\156\123\145\147\165\156", "\110\141\143\145\162", null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x87fffffffffffcffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0x7800000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[91];
private final int[] jjstateSet = new int[182];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PseintTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PseintTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 91; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 64)
   {
      jjmatchedKind = 64;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
        System.out.println(image + " -> Arranque_Programa");
         break;
      case 2 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
        System.out.println(image + " -> Fin_Programa");
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(image + " -> Tipo_De_Dato");
         break;
      case 4 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Tipo_De_Dato");
         break;
      case 5 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Tipo_De_Dato");
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Tipo_De_Dato");
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Tipo_De_Dato");
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Cadena_Texto");
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Caracter_Texto");
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Numero_Entero");
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Numero_Decimal");
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
        System.out.println(image + " -> Booleano_Falso");
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
        System.out.println(image + " -> Booleano_Verdadero");
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Comentario");
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
        System.out.println(image + " -> Delimitador");
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
        System.out.println(image + " -> Lectura");
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
        System.out.println(image + " -> Escritura");
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
        System.out.println(image + " -> Definicion_Varible");
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
        System.out.println(image + " -> Definir_Como");
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
        System.out.println(image + " -> Operador_Asignacion");
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
        System.out.println(image + " -> Operador_Suma");
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
        System.out.println(image + " -> Operador_Resta");
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
        System.out.println(image + " -> Operador_Mult");
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
        System.out.println(image + " -> Operador_Div");
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
        System.out.println(image + " -> Operador_Mod");
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
        System.out.println(image + " -> Operador_Logico_AND");
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
        System.out.println(image + " -> Operador_Logico_OR");
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
        System.out.println(image + " -> Operador_Logico_NOT");
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Operador_Asignacion_Compuesta");
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
        System.out.println(image + " -> Operador_igualQue");
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
        System.out.println(image + " -> Operador_diferente");
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
        System.out.println(image + " -> Operador_mayorQue");
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
        System.out.println(image + " -> Operador_menorQue");
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
        System.out.println(image + " -> Operador_mayorIgualQue");
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
         System.out.println(image + " -> Operador_menorIgualQue");
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
        System.out.println(image + " -> Operador_Dos_Puntos");
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
        System.out.println(image + " -> Parentesis_Abierto");
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
        System.out.println(image + " -> Parentesis_Cerrado");
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
        System.out.println(image + " -> Ciclo_Para");
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
        System.out.println(image + " -> Condicion_Ciclo_Para");
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
        System.out.println(image + " -> Incremento_Ciclo_Para");
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
        System.out.println(image + " -> Fin_Ciclo_Para");
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
        System.out.println(image + " -> Ciclo_Mientras");
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
        System.out.println(image + " -> Fin_Ciclo_Mientras");
         break;
      case 47 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
        System.out.println(image + " -> Ciclo_Repetir");
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
        System.out.println(image + " -> Condicion_Ciclo_Repetir");
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
        System.out.println(image + " -> Condicional_Si");
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
        System.out.println(image + " -> Entonces");
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
        System.out.println(image + " -> Condicional_Sino");
         break;
      case 52 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
        System.out.println(image + " -> Fin_Condicional_Si");
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
        System.out.println(image + " -> Condicional_Segun");
         break;
      case 54 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
        System.out.println(image + " -> Segun_Caso");
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
        System.out.println(image + " -> Segun_Caso_Predeterminado");
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
        System.out.println(image + " -> Fin_Condicional_Segun");
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
        System.out.println(image + " -> Hacer");
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(image + " -> Variable");
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
