
options {
    STATIC = false;
    //**AGREGUE UNA OPCION QUE ME PERMITE NO TOMARLE IMPORTANCIA MAYUSCULAS Y MINUSCULAS
    IGNORE_CASE = true;
}

PARSER_BEGIN(Pseasy)
package src;
import java.util.ArrayList;
import java.io.*;
import java.util.ArrayDeque;
import java.util.Deque;
import src.TablaIdentificadores;
public class Pseasy {


        static ArrayList<String> tabla = PseasyTokenManager.tabla;

        //Arreglo para guardar lo generado por el codigo intermedio
        static ArrayList<String> codigoIntermedio = new ArrayList();

        //Arreglo para guardar variables temporales
        static ArrayList<String> listaTemporales = new ArrayList();

        static Deque<String> pila = PseasyTokenManager.pila;

        //Variables para generacion de codigo intermedio
        private static int tmpContador = 0;
        private static int etContador = 0;

        public static void main(String[] args) {
            try{
                Pseasy pseasy = new Pseasy(System.in);
                pseasy.programa();

                if(tabla.size() != 0){
                    System.out.println("PROGRAM ERRORS");
                    System.out.println("=================");
                    for(String i:tabla){
                        System.out.println(i);
                    }
                }else{
                    System.out.println("\ncompilation generated with success");
                    ArchivoCodigoIntermedio.escribirArchivo(codigoIntermedio);

                }
              }catch(Exception e){
                System.out.println(e.getMessage());
              }
          }



          //METODOS PARA LA GENERACION DE CODIGO INTERMEDIO
          private static void agregarCodigoIntermedio(String codigo){
            codigoIntermedio.add(codigo);
          }

          private static String generarTmp(){
            tmpContador++;
            String aux= "tmp" + tmpContador;
            listaTemporales.add(aux);
            return aux;
          }
          private static String generarEq(){
            etContador++;
            return "etq"+etContador;
          }
          private static class BloqueCondicion{
            String etqVerdad,etqFalso;
          }

          //Obtiene el ultimo elemento en nuestra lista de variables temporales
          private static String obtenerUltimoTmp(){
            if(listaTemporales.size() > 0)
            {
                int indexUltimo = listaTemporales.size() -1;
                return listaTemporales.get(indexUltimo);
            }
                return null;
          }

          //Obtiene el tamaño de la lista de variables temporales

          private static void generarOperacionAsignacion(String id, String exp){
            String tmp = id +" := " + exp + "\n";
            codigoIntermedio.add(tmp);
          }



          private static void generarOperacionAritmetica(String op,String ex1, String ex2){

                String aux = generarTmp();
                String cI = aux + "=" + ex1 + op + ex2 + "\n";
                codigoIntermedio.add(cI);
          }

          //METODOS PARA GENERAR EL CODIGO INTERMEDIO EN CONDICIONES
          private static void generarLabel(String label){
            codigoIntermedio.add("label " + label + "\n");
          }
          private static void generarGoto(String label){
            codigoIntermedio.add("\tgoto " + label + "\n");
          }

          private BloqueCondicion generarOperacionRelacional(String e1, String e2, String op){
            BloqueCondicion bloque = new BloqueCondicion();
            bloque.etqVerdad = generarEq();
            bloque.etqFalso = generarEq();
            codigoIntermedio.add("\tif " +e1 +op +e2 +" goto "+bloque.etqVerdad + "\n");
            generarGoto(bloque.etqFalso);
            return bloque;
          }

          private static void interCondicion(BloqueCondicion bloque){
            String aux = bloque.etqVerdad;
            bloque.etqVerdad = bloque.etqFalso;
            bloque.etqFalso = aux;
          }
        }

 // ------------------------ GENERACION CODIGO INTERMEDIO -----------------------------


 //CLASE PARA ESCRIBIR EL CODIGO INTERMEDIO EN UN ARCHIVO
class ArchivoCodigoIntermedio {

    public static void escribirArchivo(ArrayList<String>codigoIntermedio){
        String fileName = "codigoIntermedio\\codigo_intermedio.txt";
        File archivo = new File(fileName);
        try{
            PrintWriter salida = new PrintWriter(archivo);
            for(String e:codigoIntermedio){
                salida.print(e);
            }
            salida.close();
        }catch(FileNotFoundException ex){
            System.out.println("No se encontro el archivo");
        }
    }
}

PARSER_END(Pseasy)

TOKEN_MGR_DECLS:{
    static ArrayList<String> tabla = new ArrayList();

    //PILA DE OPERADORES
    //En esta pila iremos guardando los operadores para comprobar la jerarquia de operadores
    static Deque<String> pila = new ArrayDeque();


}

// Inicio y fin del programa
TOKEN : {
    <INICIO: "Algoritmo">
    |
    <FIN: "FinAlgoritmo">
}

// Tipos de dato
TOKEN : {

    <ENTERO: "entero">
    |
    <FLOTANTE:"flotante">
    |
    <CADENA:"cadena">
    |
    <BOOLEANO:"booleano">
}


// Constantes/Literales
TOKEN : {
    <#LETRA: ["a" - "z"] | ["A" - "Z"]>
    |
    <#NUMERO: ["0" - "9"]>
    |
    <CADENA_TEXTO: "\"" ( ~["\""] )* "\"">
    |
    <NUMERO_ENTERO:("-" | "" | "+")(<NUMERO>)+>
    |
    <NUMERO_DECIMAL: ("-" | "" | "+")(<NUMERO>)+"."(<NUMERO>)+>
    |
    <BOOLEANO_FALSO: "Falso">
    |
    <BOOLEANO_VERDADERO: "Verdadero">
    |
    <DELIMITADOR: ";">
    |
    <COMA:","> //Coma

}

// Escritura, Lectura y Definición de variables
TOKEN : {
    <LEER: "Leer">
    |
    <ESCRIBIR: "Escribir">
    |
    <DEFINIR: "Definir">
}

// Operadores
TOKEN : {
    <ASIGNACION: "=">
    |
    <SUMA: "+">
    |
    <RESTA: "-">
    |
    <MULTIPLICACION: "*">
    |
    <DIVISION: "/">
    |
    <LOGICO_AND: "&&">
    |
    <LOGICO_OR: "||">
    |
    <LOGICO_NOT: "!">
    |
    <OPERADOR_IGUAL: "==">
    |
    <OPERADOR_DIFERENTE: "!=">
    |
    <OPERADOR_MAYOR: ">">
    |
    <OPERADOR_MENOR: "<">
    |
    <OPERADOR_MAYOR_IGUAL: ">=">
    |
    <OPERADOR_MENOR_IGUAL: "<=">
    |
    <OPERADOR_DOS_PUNTOS: ":">
    |
    <PAREN_ABIERTO: "(">
    |
    <PAREN_CERRADO: ")">
}

// Ciclos
TOKEN : {
    <INICIO_CICLO_PARA: "Para">
    |
    <CONDICION_CICLO_PARA: "Hasta que">
    |
    <INCREMENTO_CICLO_PARA: "incremento">
    |
    <DECREMENTO_CICLO_PARA:"decremento">
    |
    <FIN_CICLO_PARA: "FinPara">
    |
    <INICIO_CICLO_MIENTRAS: "Mientras">
    |
    <FIN_CICLO_MIENTRAS: "FinMientras">
    |
    <INICIO_CICLO_REPETIR: "Repetir">
    |
    <CONDICION_CICLO_REPETIR: "Finaliza cuando">
}

// Condicionales
TOKEN : {
    <INICIO_CONDICIONAL_SI:"Si">
    |
    <ENTONCES:"Entonces">
    |
    <CONDICIONAL_SINO:"Sino">
    |
    <FIN_CONDICIONAL_SI:"FinSi">
    |
    <INICIO_CONDICIONAL_SEGUN:"Segun">
    |
    <CASO:"Caso">
    |
    <CASO_PREDETERMINADO:"En otro caso">
    |
    <FIN_SEGUN:"FinSegun">
    |
    <HACER : "Hacer">
}

//Variables
TOKEN : {
    <VARIABLE:(<LETRA> | "_")(<NUMERO> | <LETRA> | "_")*>
    /*
    * IDENTIFICADORES NO VALIDOS
    * */
}

SKIP : {
    " "
    | "\t"
    | "\r\n"
    | "\n"
    | <COMENTARIO: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    //Tokens invalidos
    |<ID_INVALIDO:(<NUMERO>)+(<LETRA>|<NUMERO>)+>{tabla.add("Lexical error at line:" + input_stream.getBeginLine() + " column:" + input_stream.getBeginColumn() +
                                                                     " invalid id:" + image);}
    | <INVALIDO: ~[]>{tabla.add("Lexical error at line:" + input_stream.getBeginLine() + " column:" + input_stream.getBeginColumn() +
                    "invalid token:" + image);}
}

// Gramaticas

//CAMBIO: Nuestro programa puede no tener sentencias entre Algoritmo y FinAlgoritmo
void programa(): { }{

       try{
          <INICIO>
          ( sentencias() )*
          <FIN>{//TablaIdentificadores.mostrarTabla();
       }
       }catch(ParseException e){
            Token t;
            do{
                t=getNextToken();
            }while(t.kind != EOF);


            tabla.add("Parser Error:" + e.getMessage());
       }

}

void sentencias():{
    TablaIdentificadores.inicializarTipos();
 }{

            sentenciaAsignacion() |
            sentenciaDeclaracionVariables() |
            leerDato() |
            imprimirDato() |
            sentenciaSi() |
            sentenciaSegun() |
            sentenciaPara() |
            //sentenciaRepetir() |
            sentenciaMientras()



}
//ASIGNACION DE VALOR
//CAMBIAR FORMA EN COMO SE HACE LA C
void sentenciaAsignacion():{
    String identificador = null;
    String asignado = null;
 }{
    try{

        <VARIABLE> {
                        //EXISTENCIA DE IDENTIFICADORES
                        // Sino existe el id, lo guardamos en nuestra arreglo de errores
                        //System.out.println("Token:" + token);
                         if(!TablaIdentificadores.checkExistenciaId(token.image)){
                               tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                       token.beginLine + " column:" + token.beginColumn);
                         }else{
                            identificador = token.image;

                         }
        }
        asignado=asignacion() { //Se evalua si se esta asignando el tipo correcto al identificador

                        //--- PARTE SEMANTICA: COMPROBACION DE TIPOS
                        if(asignado != null && identificador !=null){
                                  //Si asignado e identificador tienen un valor asignado, se comprueban que sean del mismo tipo
                                if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){

                                    tabla.add("The token: " + asignado + " doesn't correspond to the " +
                                            TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");

                                // ----- GENERACION CODIGO INTERMEDIO
                                //Si esta bien semanticamente, lo pasamos a codigo intermedio
                                }else{
                                    // variable = tmp# -> se asigna la variable al ultimo tmp generado
                                    asignado = obtenerUltimoTmp();
                                     generarOperacionAsignacion(identificador,asignado);



                                }

                        }


        }
        <DELIMITADOR>

    }catch(ParseException e){
        //System.out.println(e.toString());
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }
}

//Probar manejo de errores
void sentenciaDeclaracionVariables():{}{
    try{
        (declaracionVariables() <DELIMITADOR>)

    }catch(ParseException e){
            //System.out.println(e.toString());
            Token t;
            do{
                t=getNextToken();
                //VERIFICAR ERROR DE PUNTO Y COMA AL FINAL
            }while(t.kind != DELIMITADOR && t.kind != EOF);
            tabla.add("Parser error:" + e.getMessage());
    }
}


//CAMBIAMOS el tipo de dato retornado a token
String constantes():{ }{
    <NUMERO_ENTERO> {return token.image;}
    | <NUMERO_DECIMAL>  {return token.image;}
    | <CADENA_TEXTO> {return token.image;}
    | <BOOLEANO_FALSO> {return token.image;}
    | <BOOLEANO_VERDADERO> {return token.image;}
}

//ASIGNACION CORRECTA DE VALORES
String asignacion():{String asignado = "";}{
     //<ASIGNACION> asignado=condicion()

     <ASIGNACION> asignado=tipoOperacion() {

                    return asignado;
    }
}

/*
String condicion():{String asignado = "";} {
    asignado=operacion() {return asignado;}
    //( operadoresRelacionales() operacion() )* -> Evaluar si quiero dejar esto en mi gramatica
}*/


/*
* Separar las operaciones aritmeticas de las relaciones
*
* */
/*
String operacion():{
    String t = "";
    String id = "";
    String valor = "";
 }{
    ( <LOGICO_NOT> )* ( <VARIABLE> { //EXISTENCIA DE IDENTIFICADORES

                                    // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                                        tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                                    token.beginLine + " column:" + token.beginColumn);
                                    }else{
                                        t=token.image;
                                    }

}
    | t=constantes() {  //En cualquier asignacion de constantes, se utiliza una variable temporal
                        //tmp = 10
                        //return tmp

                         }
    | operacionParentesis() )

    (operadores() ( <LOGICO_NOT> )* (<VARIABLE> {    //EXISTENCIA DE IDENTIFICADORES
                                                     // Sino existe el id, lo guardamos en nuestra arreglo de errores
                                                        if(!TablaIdentificadores.checkExistenciaId(token.image)){
                                                            tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                                                            token.beginLine + " column:" + token.beginColumn);
                                                        }else{
                                                            t=token.image;
                                                        }
}
    | t=constantes()| operacionParentesis() ))*
    {return t;}
}*/

/*INICIA MODIFICACION DE FUNCIONES BNF*/
String tipoOperacion(): {String t;}{
    (t=operacionAritmetica()
    |t=operacionConcatenacion()
    |t=asignarBooleano())
    {//Borramos los elementos de la pila
          pila.clear();
          return t;
          }
}
/*
* EXPLICACION DE VARIABLES
* e1 y e2 son variables que guardan la representacion en string del token
* Pila es una estructura de datos que nos permite comprobar la jerarquia de operadores
* */
String operacionAritmetica():{String e1=""; String e2="";String aux="";}{
    e1 = nivelSegundoJerarquia() (<SUMA>  e2=nivelSegundoJerarquia() {


                        //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                        //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                        if(pila.size() > 0 && pila.getLast().equals("+")){
                            //Se comprueba que no se haya generado antes una variable temporal
                            //Si es asi, el utiliza la ultima variable temporal generada
                            aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                            generarOperacionAritmetica("+",aux,e2);

                            //Eliminamos el elemto final
                            pila.pop();
                            pila.add("+");
                        }
                        /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                        la funcion generarOperacion, de la siguiente forma
                        */
                        else{
                            e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                            generarOperacionAritmetica("+",e1,e2);

                            //Guardamos el operador en la pila
                            pila.add("+");
                        }



                        }
                        |<RESTA> e2=nivelSegundoJerarquia() {
                            //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                            //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("-")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("-",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("-");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("-",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("-");
                                    }
                                }
                            )*
                                {return e1;}
}
//Funciones para la jerarquia de operadores
String nivelSegundoJerarquia():{String e1; String e2; String aux="";}{
    e1 = terminalesNumeros() (<MULTIPLICACION> e2=terminalesNumeros() {
                            //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                            //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("*")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("*",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("*");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("*",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("*");
                                }
                    }
                              |<DIVISION> e2=terminalesNumeros() {
                                //Comprobar si estamos realizando operaciones sobre la misma jerarquia de operadores
                                //Si la pila de operadores tienen un elemento, comprobamos si el ultimo elemento

                                if(pila.size() > 0 && pila.getLast().equals("/")){
                                    //Se comprueba que no se haya generado antes una variable temporal
                                    //Si es asi, el utiliza la ultima variable temporal generada
                                    aux = obtenerUltimoTmp() == null ? e1 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("/",aux,e2);

                                    //Eliminamos el elemto final
                                    pila.pop();
                                    pila.add("/");
                                }
                                /*Si la pila de operadore esta vacia, colocamos el orden de los parametros en
                                la funcion generarOperacion, de la siguiente forma
                                */
                                else{
                                    e2 = obtenerUltimoTmp() == null ? e2 : obtenerUltimoTmp();
                                    generarOperacionAritmetica("/",e1,e2);

                                    //Guardamos el operador en la pila
                                    pila.add("/");
                                }
                            }
                              )*
                              {return e1;}
}
String terminalesNumeros():{String t="";}{
    (<NUMERO_ENTERO> {t=token.image;}
    |<NUMERO_DECIMAL> {t=token.image;}
    |<VARIABLE>{
                    //EXISTENCIA DE IDENTIFICADORES
                 // Sino existe el id, lo guardamos en nuestra arreglo de errores
                    if(!TablaIdentificadores.checkExistenciaId(token.image)){
                        tabla.add("The indentifier: " + token.image + " doesn't exist, at line:" +
                        token.beginLine + " column:" + token.beginColumn);
                    }else{
                        t=token.image;
                    }

                }
    |<PAREN_ABIERTO>t=operacionAritmetica()<PAREN_CERRADO>
    ){return t;}
}
String operacionConcatenacion():{String ex; }{
    <CADENA_TEXTO>{ex=token.image;} (<SUMA> <CADENA_TEXTO>{ex=token.image;})*
    {return ex;}
}
String asignarBooleano():{}{
    <BOOLEANO_VERDADERO> {return token.image;}
    |<BOOLEANO_FALSO> {return token.image;}
}


//TERMINA MODIFICACION DE FUNCIONES BNF

/*
void operacionParentesis():{}{
    <PAREN_ABIERTO> operacion() <PAREN_CERRADO>
}

void operadores():{}{
    operadoresAritmeticos() | operadoresLogicos() | operadoresRelacionales()
}*/

//DECLARACION DE VARIABLES:COMPROBACION DE TIPOS
void declaracionVariables():{
    String identificador = "";
    String asignado = "";
    String tipoDato = "";
    String aux;
 }{



    <DEFINIR>
    tipoDato=tiposDato()
    <VARIABLE> {
                        if(TablaIdentificadores.checkExistenciaId(token.image)){

                            tabla.add("The identifier: " + token.image + " already exist, at line: " + token.beginLine + " column:" + token.endColumn);
                        }else{
                            TablaIdentificadores.insertarIdentificadores(token.image,tipoDato);
                            identificador = token.image;
                        }
                    }

    (asignado=asignacion())? { //Se evalua si se esta asignando el tipo correcto al identificador
                    if(!asignado.equals("")){ //Comprobamos que el token asignado tenga un valor asociado y no sea nulo
                        //System.out.println("asignado =" + asignado);
                                  if(!TablaIdentificadores.verifiacionConToken(identificador,asignado)){
                                      tabla.add("The token: " + asignado + " doesn't correspond to the " +
                                        TablaIdentificadores.obtenerTipoidentificador(identificador) + " type");
                                  }else{
                                      aux = tipoDato + " " + identificador + " = " +asignado + "\n";
                                      agregarCodigoIntermedio(aux);
                                  }
                    } else{
                    aux = tipoDato +" "+ identificador + "\n";
                    agregarCodigoIntermedio(aux);
                    }
    }

}
String tiposDato():{ }{
    // Regresamos el patron que coincide con el token
    <ENTERO> {return token.image;}
    | <FLOTANTE> {return token.image;}
    | <CADENA> {return token.image;}
    | <BOOLEANO> {return token.image;}
}

void leerDato():{String leer; String variable;}{
    try{
        <LEER><VARIABLE>{variable=token.image;} <DELIMITADOR> {agregarCodigoIntermedio("Leer " + variable );}
    }catch(ParseException e){
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }

}

void imprimirDato():{String texto; String variable;}{
    //Modificar estructura
    try{
        LOOKAHEAD(3)<ESCRIBIR> <CADENA_TEXTO>{texto=token.image;} <DELIMITADOR> {agregarCodigoIntermedio("\tEscribir " + texto + "\n");}
        |LOOKAHEAD(3)<ESCRIBIR><CADENA_TEXTO>{texto=token.image;}<COMA><VARIABLE>{variable=token.image;}<DELIMITADOR>{agregarCodigoIntermedio("\tEscribir " + texto +"," + variable + "\n" );}
        |<ESCRIBIR><VARIABLE>{variable = token.image;}<DELIMITADOR>{agregarCodigoIntermedio("\tEscribir " + variable + "\n");}
    }catch(ParseException e){
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != DELIMITADOR && t.kind != FIN);
        tabla.add("Parser error:" + e.getMessage());
    }

    //<ESCRIBIR> ( constantes() | <VARIABLE> ) <DELIMITADOR>
}
/*  MODIFICAMOS LA FUNCION CONDICION*/
BloqueCondicion condicion():{BloqueCondicion c1,c2;}{

    c1=condTerm() (<LOGICO_OR> {generarLabel(c1.etqFalso);}
                    c2=condTerm(){
                            generarLabel(c1.etqVerdad);
                            generarGoto(c2.etqVerdad);
                            c1=c2;
                                } )* {return c1;}
}
BloqueCondicion condTerm():{BloqueCondicion c1; BloqueCondicion c2; }{
    c1=condFact() (<LOGICO_AND> {generarLabel(c1.etqVerdad);}
                                c2=condFact(){
                            generarLabel(c1.etqFalso);
                            generarGoto(c2.etqFalso);
                            c1=c2;
}                       )* {return c1;}
}
BloqueCondicion condFact():{
 BloqueCondicion c1;
 boolean negado = false;
 }{
    (<LOGICO_NOT>{negado = !negado;})*
    (c1=condSimple() ){
        if(negado) interCondicion(c1);
        return c1;
    }
}
BloqueCondicion condSimple():{String ex1;String operador;String ex2;}{
    ex1=terminalesBooleanas() operador=operadoresRelacionales() ex2=tipoOperacion() {
                            ex2 = (obtenerUltimoTmp() == null) ? ex2:obtenerUltimoTmp();
                        return generarOperacionRelacional(ex1,ex2,operador);
                    }
}
String operadoresRelacionales():{}{
    <OPERADOR_IGUAL> {return token.image;}
    | <OPERADOR_DIFERENTE> {return token.image;}
    | <OPERADOR_MAYOR> {return token.image;}
    | <OPERADOR_MAYOR_IGUAL> {return token.image;}
    | <OPERADOR_MENOR> {return token.image;}
    | <OPERADOR_MENOR_IGUAL> {return token.image;}
}

String terminalesBooleanas():{String t;}{
    <NUMERO_ENTERO>{return token.image;}
    |<NUMERO_DECIMAL>{return token.image;}
    |<CADENA_TEXTO> {return token.image;}
    |<VARIABLE>
    { //Comprobamos si la variable existe
     if(!TablaIdentificadores.checkExistenciaId(token.image)){

        tabla.add("The identifier: " + token.image + " doesnt exist, at line: " + token.beginLine + " column:" + token.endColumn);

     }else{
        return token.image;
    }
    }
    //|<PAREN_ABIERTO> t=condSimple(){return t;} <PAREN_CERRADO>
}


void sentenciaSi():{BloqueCondicion c; String etqFinSi;}{
    try{
        <INICIO_CONDICIONAL_SI> c=condicion() <ENTONCES> {generarLabel(c.etqVerdad); }
        ( sentencias() )+ {
            etqFinSi = generarEq();
            generarGoto(etqFinSi);
            generarLabel(c.etqFalso);
        }
            [ <CONDICIONAL_SINO> ( sentencias() )+]
             <FIN_CONDICIONAL_SI> {

             generarLabel(etqFinSi);
             }
    }catch(ParseException e){
        Token t;
        do{
            t=getNextToken();
        }while(t.kind != EOF);
        tabla.add("Parser error:" + e.getMessage());
    }

}



void sentenciaSegun():{String ex ="";String finSegun; String finalCaso; String eCaso;}{

    <INICIO_CONDICIONAL_SEGUN> <VARIABLE> {
                if(!TablaIdentificadores.checkExistenciaId(token.image)){
                    tabla.add("The identifier: " + token.image + " doesn`t exist, at line: " +
                    token.beginLine + " column:" + token.endColumn);
                        }
                else {ex=token.image;}
                } <HACER> //{finSegun=generarEq();}
    ( <CASO> eCaso=constantes() <OPERADOR_DOS_PUNTOS>
    { finalCaso = generarEq();
        agregarCodigoIntermedio("\tif " + ex + " != " + eCaso + " goto " + finalCaso + "\n");
        generarLabel(finalCaso);
                         }
    ( sentencias())+ )+
    ( <CASO_PREDETERMINADO> <OPERADOR_DOS_PUNTOS> ( sentencias() )+ )?
    <FIN_SEGUN> {finSegun = generarEq(); generarLabel(finSegun);}
}

//Ciclo for
void sentenciaPara():{BloqueCondicion c;String inicioPara; String ex1; String ex2;String variacion;}{


        <INICIO_CICLO_PARA> {
                              inicioPara=generarEq();
                              generarLabel(inicioPara);
                            }
        <VARIABLE>{ex1=token.image;}<ASIGNACION> ex2=tipoOperacion() {generarOperacionAsignacion(ex1,ex2);}
            <CONDICION_CICLO_PARA> c=condicion() {generarLabel(c.etqVerdad);}
            variacion=variacionPara() ( <NUMERO_ENTERO> | <NUMERO_DECIMAL> )
            ( sentencias() )+ {agregarCodigoIntermedio("\t" + ex1 + " " + variacion + " " + "1");}
            <FIN_CICLO_PARA>{generarGoto(inicioPara); generarLabel(c.etqFalso);}


}
String variacionPara():{}{
    <INCREMENTO_CICLO_PARA> {return "inc";}
    |<DECREMENTO_CICLO_PARA> {return "des";}
}

/*
//Ciclo do while
void sentenciaRepetir():{ }{

    <INICIO_CICLO_REPETIR> ( sentencias() )+
    <CONDICION_CICLO_REPETIR> condicion() <DELIMITADOR>
}*/

//Ciclo while
void sentenciaMientras():{BloqueCondicion c;String inicioWhile="";}{

    <INICIO_CICLO_MIENTRAS> {
                                inicioWhile=generarEq();
                               generarLabel(inicioWhile);
                            }
    c=condicion() <HACER> {generarLabel(c.etqVerdad);}
    ( sentencias() )+
    <FIN_CICLO_MIENTRAS> {generarGoto(inicioWhile); generarLabel(c.etqFalso);}
}




/*
* ELEMENTOS QUE ELIMINE
* EL TIPO DE DATO CARACTER
* LA ASIGNACION COMPUESTA
*
* */
